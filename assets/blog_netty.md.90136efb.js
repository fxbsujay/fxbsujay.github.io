import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.4cf23e62.js";const p="/doc/netty-principle/img-0.png",h=JSON.parse('{"title":"Netty 源码分析","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/netty.md","filePath":"blog/netty.md","lastUpdated":1683732253000}'),o={name:"blog/netty.md"},e=l(`<h1 id="netty-源码分析" tabindex="-1">Netty 源码分析 <a class="header-anchor" href="#netty-源码分析" aria-label="Permalink to &quot;Netty 源码分析&quot;">​</a></h1><h2 id="netty启动流程" tabindex="-1">Netty启动流程 <a class="header-anchor" href="#netty启动流程" aria-label="Permalink to &quot;Netty启动流程&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span></span>
<span class="line"><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">Selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">open</span><span style="color:#002339;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生ssc存储config</span></span>
<span class="line"><span style="color:#0991B6;">NioServerSocketChannel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">attachment</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">NioServerSocketChannel</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span></span>
<span class="line"><span style="color:#0991B6;">ServerSocketChannel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">serverSocketChannel</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ServerSocketChannel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">open</span><span style="color:#002339;">(); </span></span>
<span class="line"><span style="color:#2F86D2;">serverSocketChannel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">configureBlocking</span><span style="color:#002339;">(</span><span style="color:#174781;">false</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 启动 nio boss 线程执行接下来的操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">//注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span></span>
<span class="line"><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">serverSocketChannel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(selector, </span><span style="color:#174781;">0</span><span style="color:#002339;">, attachment);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 初始化器是一次性的，只为添加 acceptor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 绑定端口</span></span>
<span class="line"><span style="color:#2F86D2;">serverSocketChannel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">bind</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">InetSocketAddress</span><span style="color:#002339;">(</span><span style="color:#174781;">8080</span><span style="color:#002339;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 触发 channel active 事件，在 head 中关注 op_accept 事件</span></span>
<span class="line"><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_ACCEPT</span><span style="color:#002339;">);</span></span></code></pre></div><ul><li>获得选择器Selector，Netty中使用 NioEventloopGroup 中的 NioEventloop 封装了线程和选择器</li><li>创建 NioServerSocketChannel，该Channel作为附件添加到 ServerSocketChannel 中</li><li>创建 ServerSocketChannel，将其设置为非阻塞模式，并注册到Selector中，<code>此时未关注事件，但是添加了附件NioServerSocketChannel</code></li><li>绑定端口</li><li>通过 interestOps 设置感兴趣的事件</li></ul><hr><p>选择器Selector的创建是在NioEventloopGroup中完成的。NioServerSocketChannel与ServerSocketChannel的创建，ServerSocketChannel注册到Selector中以及绑定操作都是由<code>bind</code>方法完成的</p><p>所以服务器启动的入口便是<code>io.netty.bootstrap.ServerBootstrap.bind</code></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#7EB233;">bind</span><span style="color:#002339;">(</span><span style="color:#0991B6;">SocketAddress</span><span style="color:#002339;"> localAddress) {</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#7EB233;">validate</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doBind</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ObjectUtil</span><span style="color:#002339;">.</span><span style="color:#7EB233;">checkNotNull</span><span style="color:#002339;">(localAddress, </span><span style="color:#A44185;">&quot;localAddress&quot;</span><span style="color:#002339;">));</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><h3 id="dobind" tabindex="-1">doBind <a class="header-anchor" href="#dobind" aria-label="Permalink to &quot;doBind&quot;">​</a></h3><blockquote><p>真正完成初始化、注册以及绑定的方法是io.netty.bootstrap.AbstractBootstrap.doBind dobind方法在主线程中执行</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doBind</span><span style="color:#002339;">(</span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SocketAddress</span><span style="color:#002339;"> localAddress) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 负责 NioServerSocketChannel 和 ServerSocketChannel 的创建</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// ServerSocketChannel 的注册工作</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// init由main线程完成，regisetr由NIO线程完成</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">initAndRegister</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Channel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;">.</span><span style="color:#7EB233;">channel</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;">.</span><span style="color:#7EB233;">cause</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> regFuture;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 因为register操作是异步的</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 所以要判断主线程执行到这里时，register操作是否已经执行完毕</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isDone</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 执行doBind0绑定操作</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">doBind0</span><span style="color:#002339;">(regFuture, channel, localAddress, promise);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> promise;</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 如果register操作还没执行完，就会到这个分支中来</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">PendingRegistrationPromise</span><span style="color:#002339;"> promise</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">PendingRegistrationPromise</span><span style="color:#002339;">(channel);</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 添加监听器，NIO线程异步进行doBind0操作</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;">.</span><span style="color:#7EB233;">addListener</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ChannelFutureListener</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">            @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">operationComplete</span><span style="color:#002339;">(</span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#B1108E;">future</span><span style="color:#002339;">) </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Exception</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">cause</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">future</span><span style="color:#002339;">.</span><span style="color:#7EB233;">cause</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (cause </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#2F86D2;">promise</span><span style="color:#002339;">.</span><span style="color:#7EB233;">setFailure</span><span style="color:#002339;">(cause);</span></span>
<span class="line"><span style="color:#002339;">                } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#2F86D2;">promise</span><span style="color:#002339;">.</span><span style="color:#7EB233;">registered</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7EB233;">doBind0</span><span style="color:#002339;">(regFuture, channel, localAddress, promise);</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">        });</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> promise;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><ul><li>initAndRegister</li><li>doBind0则负责连接的创建工作</li></ul><h3 id="initandregisterd" tabindex="-1">initAndRegisterd <a class="header-anchor" href="#initandregisterd" aria-label="Permalink to &quot;initAndRegisterd&quot;">​</a></h3><blockquote><p>主要负责NioServerSocketChannel和ServerSocketChannel的创建（主线程中完成）与ServerSocketChannel注册（NIO线程中完成）工作</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#7EB233;">initAndRegister</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">Channel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        channel </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">channelFactory</span><span style="color:#002339;">.</span><span style="color:#7EB233;">newChannel</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">init</span><span style="color:#002339;">(channel);</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (channel </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">unsafe</span><span style="color:#002339;">().</span><span style="color:#7EB233;">closeForcibly</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">DefaultChannelPromise</span><span style="color:#002339;">(</span></span>
<span class="line"><span style="color:#002339;">                channel, </span><span style="color:#2F86D2;">GlobalEventExecutor</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">INSTANCE</span><span style="color:#002339;">).</span><span style="color:#7EB233;">setFailure</span><span style="color:#002339;">(t);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">DefaultChannelPromise</span><span style="color:#002339;">(</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">FailedChannel</span><span style="color:#002339;">(), </span><span style="color:#2F86D2;">GlobalEventExecutor</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">INSTANCE</span><span style="color:#002339;">).</span><span style="color:#7EB233;">setFailure</span><span style="color:#002339;">(t);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">config</span><span style="color:#002339;">().</span><span style="color:#7EB233;">group</span><span style="color:#002339;">().</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(channel);</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;">.</span><span style="color:#7EB233;">cause</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">channel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isRegistered</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">close</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">unsafe</span><span style="color:#002339;">().</span><span style="color:#7EB233;">closeForcibly</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> regFuture;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>init(channel) 方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#0991B6;">Channel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 通过反射初始化 NioServerSocketChannel</span></span>
<span class="line"><span style="color:#002339;">    channel </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">channelFactory</span><span style="color:#002339;">.</span><span style="color:#7EB233;">newChannel</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">init</span><span style="color:#002339;">(channel);</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>newChannel() 方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">T</span><span style="color:#002339;"> </span><span style="color:#7EB233;">newChannel</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 通过反射调用 NioServerSocketChannel 的构造方法</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 创建 NioServerSocketChannel 对象</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">constructor</span><span style="color:#002339;">.</span><span style="color:#7EB233;">newInstance</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">throw</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ChannelException</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">constructor</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getDeclaringClass</span><span style="color:#002339;">(), t)</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>NioServerSocketChannel() 构造方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#7EB233;">NioServerSocketChannel</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 创建了ServerSocketChannel实例</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#000000;">this</span><span style="color:#002339;">(</span><span style="color:#7EB233;">newSocket</span><span style="color:#002339;">(DEFAULT_SELECTOR_PROVIDER));</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>newSocket() 方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">static</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ServerSocketChannel</span><span style="color:#002339;"> </span><span style="color:#7EB233;">newSocket</span><span style="color:#002339;">(</span><span style="color:#0991B6;">SelectorProvider</span><span style="color:#002339;"> provider) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// ServerSocketChannel.open 方法：</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// SelectorProvider.provider().openServerSocketChannel()</span></span>
<span class="line"><span style="color:#002339;">	    </span><span style="color:#357B42;font-style:italic;">// 所以此处相当于 ServerSocketChannel.open()</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 创建了 ServerSocketChannel 实例</span></span>
<span class="line"><span style="color:#002339;">    	</span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">provider</span><span style="color:#002339;">.</span><span style="color:#7EB233;">openServerSocketChannel</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">	} </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">IOException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">  	  </span><span style="color:#7B30D0;">throw</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ChannelException</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;Failed to open a server socket.&quot;</span><span style="color:#002339;">, e);</span></span>
<span class="line"><span style="color:#002339;">	}</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><h4 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h4><p>promise.channel().unsafe().register(this, promise) 方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#0991B6;">EventLoop</span><span style="color:#002339;"> eventLoop, </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelPromise</span><span style="color:#002339;"> promise) {</span></span>
<span class="line"><span style="color:#002339;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 获取EventLoop</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">AbstractChannel</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> eventLoop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">   	</span><span style="color:#357B42;font-style:italic;">// 此处完成了由 主线程 到 NIO线程 的切换</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// eventLoop.inEventLoop()用于判断当前线程是否为NIO线程</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;">.</span><span style="color:#7EB233;">inEventLoop</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">register0</span><span style="color:#002339;">(promise);</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 向NIO线程中添加任务</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;">.</span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">Runnable</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">                @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#357B42;font-style:italic;">// 该方法中会执行doRegister</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#357B42;font-style:italic;">// 执行真正的注册操作</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7EB233;">register0</span><span style="color:#002339;">(promise);</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">            });</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">           ...</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>register0() 方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">register0</span><span style="color:#002339;">(</span><span style="color:#0991B6;">ChannelPromise</span><span style="color:#002339;"> promise) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">       	...</span></span>
<span class="line"><span style="color:#002339;">            </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 执行真正的注册操作</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">doRegister</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        neverRegistered </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        registered </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">true</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 调用init中的initChannel方法</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">invokeHandlerAddedIfNeeded</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        ...</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        ...</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>doRegister() 方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doRegister</span><span style="color:#002339;">() throws Exception {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selected</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">for</span><span style="color:#002339;"> (;;) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// javaChannel()即为ServerSocketChannel</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// eventLoop().unwrappedSelector()获取eventLoop中的Selector</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// this为NIOServerSocketChannel，作为附件</span></span>
<span class="line"><span style="color:#002339;">            selectionKey </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7EB233;">javaChannel</span><span style="color:#002339;">().</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#7EB233;">eventLoop</span><span style="color:#002339;">().</span><span style="color:#7EB233;">unwrappedSelector</span><span style="color:#002339;">(), </span><span style="color:#174781;">0</span><span style="color:#002339;">, </span><span style="color:#000000;">this</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">CancelledKeyException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            ...</span></span>
<span class="line"><span style="color:#002339;">           </span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>回调 initChannel()</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">initChannel</span><span style="color:#002339;">(</span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Channel</span><span style="color:#002339;"> ch) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelPipeline</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ch</span><span style="color:#002339;">.</span><span style="color:#7EB233;">pipeline</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">ChannelHandler</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">handler</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">handler</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (handler </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">addLast</span><span style="color:#002339;">(handler);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 添加新任务，任务负责添加handler</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 该handler负责发生Accepet事件后建立连接</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">ch</span><span style="color:#002339;">.</span><span style="color:#7EB233;">eventLoop</span><span style="color:#002339;">().</span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">Runnable</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">        @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">addLast</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ServerBootstrapAcceptor</span><span style="color:#002339;">(</span></span>
<span class="line"><span style="color:#002339;">                    ch, currentChildGroup, currentChildHandler,</span></span>
<span class="line"><span style="color:#002339;">                     currentChildOptions, currentChildAttrs));</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    });</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>Register主要完成了以下三个操作</p><ul><li>完成了主线程到NIO的线程切换 <ul><li>通过 <code>eventLoop.inEventLoop()</code> 进行线程判断，判断当前线程是否为NIO线程</li><li>切换的方式为让eventLoop执行register的操作</li><li>register的操作在NIO线程中完成调用doRegister方法</li></ul></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// javaChannel()即为ServerSocketChannel</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// eventLoop().unwrappedSelector()获取eventLoop中的Selector</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// this为NIOServerSocketChannel，作为附件</span></span>
<span class="line"><span style="color:#002339;">selectionKey </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">javaChannel</span><span style="color:#002339;">().</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#7EB233;">eventLoop</span><span style="color:#002339;">().</span><span style="color:#7EB233;">unwrappedSelector</span><span style="color:#002339;">(), </span><span style="color:#174781;">0</span><span style="color:#002339;">, </span><span style="color:#000000;">this</span><span style="color:#002339;">);</span></span></code></pre></div><ul><li>将ServerSocketChannel注册到EventLoop的Selector中 <ul><li>此时还未关注事件</li><li>添加NioServerSocketChannel附件</li></ul></li><li>通过invokeHandlerAddedIfNeeded调用init中的initChannel方法 <ul><li>initChannel方法主要创建了两个handler <ul><li>一个handler负责设置配置</li><li>一个handler负责发生Accept事件后建立连接</li></ul></li></ul></li></ul><h3 id="dobind0" tabindex="-1">doBind0 <a class="header-anchor" href="#dobind0" aria-label="Permalink to &quot;doBind0&quot;">​</a></h3><p>绑定端口</p><p>在 doRegister 和 invokeHandlerAddedIfNeeded 操作中的完成后，会调用 safeSetSuccess(promise) 方法，向Promise中设置执行成功的结果。此时 doBind 方法中由 initAndRegister 返回的ChannelFuture对象regFuture便会由NIO线程异步执行doBind0绑定操作</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// initAndRegister为异步方法，会返回ChannelFuture对象</span></span>
<span class="line"><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">initAndRegister</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#2F86D2;">regFuture</span><span style="color:#002339;">.</span><span style="color:#7EB233;">addListener</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ChannelFutureListener</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">operationComplete</span><span style="color:#002339;">(</span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#B1108E;">future</span><span style="color:#002339;">) </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Exception</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">cause</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">future</span><span style="color:#002339;">.</span><span style="color:#7EB233;">cause</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (cause </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// IllegalStateException once we try to access the EventLoop of the Channel.</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">promise</span><span style="color:#002339;">.</span><span style="color:#7EB233;">setFailure</span><span style="color:#002339;">(cause);</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// Registration was successful, so set the correct executor to use.</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// See https://github.com/netty/netty/issues/2586</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">promise</span><span style="color:#002339;">.</span><span style="color:#7EB233;">registered</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 如果没有异常，则执行绑定操作</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">doBind0</span><span style="color:#002339;">(regFuture, channel, localAddress, promise);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">});</span></span></code></pre></div><p>doBind0最底层调用的是ServerSocketChannel的bind方法</p><p>NioServerSocketChannel.doBind方法</p><p>通过该方法，绑定了对应的端口</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">SuppressJava6Requirement</span><span style="color:#002339;">(</span><span style="color:#174781;">reason</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;Usage guarded by java version check&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doBind</span><span style="color:#002339;">(</span><span style="color:#0991B6;">SocketAddress</span><span style="color:#002339;"> localAddress) throws Exception {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">PlatformDependent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">javaVersion</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">&gt;=</span><span style="color:#002339;"> </span><span style="color:#174781;">7</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 调用ServerSocketChannel的bind方法，绑定端口</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">javaChannel</span><span style="color:#002339;">().</span><span style="color:#7EB233;">bind</span><span style="color:#002339;">(localAddress, </span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getBacklog</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">javaChannel</span><span style="color:#002339;">().</span><span style="color:#7EB233;">socket</span><span style="color:#002339;">().</span><span style="color:#7EB233;">bind</span><span style="color:#002339;">(localAddress, </span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getBacklog</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>关注事件</p><p>在绑定端口操作完成后，会判断各种所有初始化操作是否已经完成，若完成，则会添加ServerSocketChannel感兴趣的事件<br>​<br></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">wasActive </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> </span><span style="color:#7EB233;">isActive</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">invokeLater</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">Runnable</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">        @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fireChannelActive</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    });</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>最终在 <code>AbstractNioChannel.doBeginRead</code> 方法中，会添加ServerSocketChannel添加Accept事件</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doBeginRead</span><span style="color:#002339;">() throws Exception {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// Channel.read() or ChannelHandlerContext.read() was called</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isValid</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">    readPending </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">true</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">interestOps</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 如果ServerSocketChannel没有关注Accept事件</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> ((interestOps </span><span style="color:#7B30D0;">&amp;</span><span style="color:#002339;"> readInterestOp) </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 则让其关注Accepet事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// readInterestOp 取值是 16</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 在 NioServerSocketChannel 创建时初始化</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">(interestOps </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> readInterestOp);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>此处设置interestOps时使用的方法，避免覆盖关注的其他事件</p></div><p>首先获取Channel所有感兴趣的事件</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">interestOps</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">();</span></span></code></pre></div><p>然后再设置其感兴趣的事件</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">(interestOps </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> readInterestOp);</span></span></code></pre></div><p>各个事件对应的值</p><p><img src="`+p+`" alt=""></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过上述步骤，完成了</p><ul><li>NioServerSocketChannel与ServerSocketChannel的创建</li><li>ServerSocketChannel绑定到EventLoop的Selecot中，并添加NioServerSocketChannel附件</li><li>绑定了对应的端口</li><li>关注了Accept事件</li></ul><h2 id="nioeventloop剖析" tabindex="-1">NioEventLoop剖析 <a class="header-anchor" href="#nioeventloop剖析" aria-label="Permalink to &quot;NioEventLoop剖析&quot;">​</a></h2><h3 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h3><p>NioEventLoop的重要组成部分有三个</p><p>Selector</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#DA5221;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">NioEventLoop</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">SingleThreadEventLoop</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    ...</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// selector中的selectedKeys是基于数组的</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// unwrappedSelector中的selectedKeys是基于HashSet的    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectedSelectionKeySet</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectedKeys</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    ...</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>Thread与TaskQueue</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">abstract</span><span style="color:#002339;"> </span><span style="color:#DA5221;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">SingleThreadEventExecutor</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">AbstractScheduledEventExecutor</span><span style="color:#002339;"> </span><span style="color:#DA5221;">implements</span><span style="color:#002339;"> </span><span style="color:#B02767;">OrderedEventExecutor</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 任务队列</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Queue</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">Runnable</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">taskQueue</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 线程</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">volatile</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Thread</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">thread</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><h4 id="selector的创建" tabindex="-1">Selector的创建 <a class="header-anchor" href="#selector的创建" aria-label="Permalink to &quot;Selector的创建&quot;">​</a></h4><p>Selector是在NioEventLoop的构造方法中被创建的</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7EB233;">NioEventLoop</span><span style="color:#002339;">(</span><span style="color:#0991B6;">NioEventLoopGroup</span><span style="color:#002339;"> parent, </span><span style="color:#0991B6;">Executor</span><span style="color:#002339;"> executor, </span><span style="color:#0991B6;">SelectorProvider</span><span style="color:#002339;"> selectorProvider, </span><span style="color:#0991B6;">SelectStrategy</span><span style="color:#002339;"> strategy, </span><span style="color:#0991B6;">RejectedExecutionHandler</span><span style="color:#002339;"> rejectedExecutionHandler, </span><span style="color:#0991B6;">EventLoopTaskQueueFactory</span><span style="color:#002339;"> queueFactory) {</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">        ...</span></span>
<span class="line"><span style="color:#002339;">           </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 初始化selector，初始化过程在openSelector中</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectorTuple</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectorTuple</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">openSelector</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">selector</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectorTuple</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectorTuple</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectorTuple</span><span style="color:#002339;"> </span><span style="color:#7EB233;">openSelector</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 此处等同于 Selector.open()方法</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 创建了unwrappedSelector对象</span></span>
<span class="line"><span style="color:#002339;">        unwrappedSelector </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">provider</span><span style="color:#002339;">.</span><span style="color:#7EB233;">openSelector</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">IOException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">throw</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ChannelException</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;failed to open a new selector&quot;</span><span style="color:#002339;">, e);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>NioEventLoop的构造方法中，调用了 openSelector() 方法， 该方法会返回一个 SelectorTuple 对象，该方法是创建 Selector 的核心方法。openSelector() 方法内部调用了</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">unwrappedSelector </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">provider</span><span style="color:#002339;">.</span><span style="color:#7EB233;">openSelector</span><span style="color:#002339;">();</span></span></code></pre></div><p>获得了 Selector 对象 unwrappedSelector</p><p>后面会通过反射，修改 unwrappedSelector中SelectedKeys 的实现，然后通过 SelectedSelectionKeySetSelector 方法获得 selector。最后通过 SelectorTuple 的构造方法，将该 Selector 的值赋给 SelectorTuple 类中的 selector 与 unwrappedSelector</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">static</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#DA5221;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">SelectorTuple</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">SelectorTuple</span><span style="color:#002339;">(</span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#B1108E;">unwrappedSelector</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> unwrappedSelector;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">selector</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> unwrappedSelector;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    * 一般调用的是这个构造方法</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">SelectorTuple</span><span style="color:#002339;">(</span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#B1108E;">unwrappedSelector</span><span style="color:#002339;">, </span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#B1108E;">selector</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> unwrappedSelector;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">selector</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> selector;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>再通过 NioEventLoop 的构造方法，将 SelectorTuple 中的 Selector 赋值给 NioEventLoop中的Selector</p><h4 id="两个selector" tabindex="-1">两个Selector <a class="header-anchor" href="#两个selector" aria-label="Permalink to &quot;两个Selector&quot;">​</a></h4><p>NioEventLoop中有selector和unwrappedSelector两个Selector，它们的区别主要在于SelectedKeys的数据结构</p><ul><li>selector中的SelectedKeys是基于数组的</li><li>unwrappedSelector中的是基于HashSet的</li></ul><div class="tip custom-block line"> 这样做的主要目的是，数组的遍历效率要高于HashSet </div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectorTuple</span><span style="color:#002339;"> </span><span style="color:#7EB233;">openSelector</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Selector</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">unwrappedSelector</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        unwrappedSelector </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">provider</span><span style="color:#002339;">.</span><span style="color:#7EB233;">openSelector</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">IOException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">throw</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ChannelException</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;failed to open a new selector&quot;</span><span style="color:#002339;">, e);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    ...</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 获得基于数组的selectedKeySet实现</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectedSelectionKeySet</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectedKeySet</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">SelectedSelectionKeySet</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">Object</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">maybeException</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">AccessController</span><span style="color:#002339;">.</span><span style="color:#7EB233;">doPrivileged</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">PrivilegedAction</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">Object</span><span style="color:#002339;">&gt;() {</span></span>
<span class="line"><span style="color:#002339;">        @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Object</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 通过反射拿到unwrappedSelector中的selectedKeys属性</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#0991B6;">Field</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectedKeysField</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectorImplClass</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getDeclaredField</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;selectedKeys&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#0991B6;">Field</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">publicSelectedKeysField</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectorImplClass</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getDeclaredField</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;publicSelectedKeys&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">                ...</span></span>
<span class="line"><span style="color:#002339;">	</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 暴力反射，修改私有属性</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">cause</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ReflectionUtil</span><span style="color:#002339;">.</span><span style="color:#7EB233;">trySetAccessible</span><span style="color:#002339;">(selectedKeysField, </span><span style="color:#174781;">true</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (cause </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> cause;</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">                cause </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ReflectionUtil</span><span style="color:#002339;">.</span><span style="color:#7EB233;">trySetAccessible</span><span style="color:#002339;">(publicSelectedKeysField, </span><span style="color:#174781;">true</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (cause </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> cause;</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 替换为基于数组的selectedKeys实现</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">selectedKeysField</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(unwrappedSelector, selectedKeySet);</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">publicSelectedKeysField</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(unwrappedSelector, selectedKeySet);</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">NoSuchFieldException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> e;</span></span>
<span class="line"><span style="color:#002339;">            } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">IllegalAccessException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> e;</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    selectedKeys </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> selectedKeySet;</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 调用构造函数，创建unwrappedSelector与selector</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">SelectorTuple</span><span style="color:#002339;">(unwrappedSelector,</span></span>
<span class="line"><span style="color:#002339;">                             </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">SelectedSelectionKeySetSelector</span><span style="color:#002339;">(unwrappedSelector, selectedKeySet));</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>获得数组实现SelectedKeys的Selector的原理是反射，主要步骤如下</p><ul><li>获得基于数组的selectedKeySet实现</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 获得基于数组的selectedKeySet实现</span></span>
<span class="line"><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectedSelectionKeySet</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectedKeySet</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">SelectedSelectionKeySet</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7EB233;">SelectedSelectionKeySet</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">	keys </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;">[</span><span style="color:#174781;">1024</span><span style="color:#002339;">];</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><ul><li>通过反射拿到unwrappedSelector中的SelectedKeySet并将其替换为selectedKeySet</li><li>通过Selector的构造方法获得selector</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">SelectedSelectionKeySetSelector</span><span style="color:#002339;">(unwrappedSelector, selectedKeySet)</span></span></code></pre></div><ul><li>通过SelectorTuple的构造方法获得拥有两种Selector的SelectorTuple对象，并返回给NioEventLoop</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 调用构造函数，创建unwrappedSelector与selector</span></span>
<span class="line"><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">SelectorTuple</span><span style="color:#002339;">(unwrappedSelector, </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">SelectedSelectionKeySetSelector</span><span style="color:#002339;">(unwrappedSelector, selectedKeySet));</span></span></code></pre></div><h3 id="nio线程启动时机" tabindex="-1">NIO线程启动时机 <a class="header-anchor" href="#nio线程启动时机" aria-label="Permalink to &quot;NIO线程启动时机&quot;">​</a></h3><p>启动NioEventLoop中的线程，在首次执行任务时，才会被创建，且只会被创建一次</p><p>测试代码</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">TestNioEventLoop</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">static</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">main</span><span style="color:#002339;">(</span><span style="color:#0991B6;">String</span><span style="color:#002339;">[] </span><span style="color:#B1108E;">args</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">EventLoop</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">NioEventLoopGroup</span><span style="color:#002339;">().</span><span style="color:#7EB233;">next</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 使用NioEventLoop执行任务</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;">.</span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(()</span><span style="color:#0991B6;">-&gt;</span><span style="color:#002339;">{</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">System</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">out</span><span style="color:#002339;">.</span><span style="color:#7EB233;">println</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;hello&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        });</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>进入execute执行任务</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(</span><span style="color:#0991B6;">Runnable</span><span style="color:#002339;"> task) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 检测传入的任务是否为空，为空会抛出NullPointerException</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">ObjectUtil</span><span style="color:#002339;">.</span><span style="color:#7EB233;">checkNotNull</span><span style="color:#002339;">(task, </span><span style="color:#A44185;">&quot;task&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 执行任务</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 此处判断了任务是否为懒加载任务，wakesUpForTask的返回值只会为true</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(task, </span><span style="color:#7B30D0;">!</span><span style="color:#002339;">(task </span><span style="color:#7B30D0;">instanceof</span><span style="color:#002339;"> LazyRunnable) </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> </span><span style="color:#7EB233;">wakesUpForTask</span><span style="color:#002339;">(task));</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>进入上述代码的execute方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(</span><span style="color:#0991B6;">Runnable</span><span style="color:#002339;"> task, </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> immediate) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 判断当前线程是否为NIO线程</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 判断方法为 return thread == this.thread;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// this.thread即为NIO线程，首次执行任务时，其为null</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">inEventLoop</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">inEventLoop</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 向任务队列taskQueue中添加任务</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">addTask</span><span style="color:#002339;">(task);</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 当前线程不是NIO线程，则进入if语句</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">inEventLoop) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 启动NIO线程的核心方法</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">startThread</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        ...</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">	</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 有任务需要被执行时，唤醒阻塞的NIO线程</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">addTaskWakesUp </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> immediate) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">wakeup</span><span style="color:#002339;">(inEventLoop);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>进入startThread方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">startThread</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 查看NIO线程状态是否为未启动</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 该if代码块只会执行一次</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// state一开始的值就是ST_NOT_STARTED</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// private volatile int state = ST_NOT_STARTED;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (state </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> ST_NOT_STARTED) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 通过原子属性更新器将状态更新为启动（ST_STARTED）</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">STATE_UPDATER</span><span style="color:#002339;">.</span><span style="color:#7EB233;">compareAndSet</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">, ST_NOT_STARTED, ST_STARTED)) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">success</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 执行启动线程</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7EB233;">doStartThread</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">                success </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">true</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            } </span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">success) {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#2F86D2;">STATE_UPDATER</span><span style="color:#002339;">.</span><span style="color:#7EB233;">compareAndSet</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">, ST_STARTED, ST_NOT_STARTED);</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>进入doStartThread，真正创建NIO线程并执行任务</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doStartThread</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">assert</span><span style="color:#002339;"> thread </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 创建NIO线程并执行任务</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">executor</span><span style="color:#002339;">.</span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">Runnable</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">        @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// thread即为NIO线程</span></span>
<span class="line"><span style="color:#002339;">            thread </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">Thread</span><span style="color:#002339;">.</span><span style="color:#7EB233;">currentThread</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (interrupted) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">thread</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interrupt</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">success</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">updateLastExecutionTime</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 执行内部run方法</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">SingleThreadEventExecutor</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">this</span><span style="color:#002339;">.</span><span style="color:#7EB233;">run</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">                success </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">true</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            } </span></span>
<span class="line"><span style="color:#002339;">            </span></span>
<span class="line"><span style="color:#002339;">            ...</span></span>
<span class="line"><span style="color:#002339;">    });</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>通过SingleThreadEventExecutor.this.run()执行传入的任务（task）</p><p>该run方法是NioEvnetLoop的run方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectCnt</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 死循环，不断地从任务队列中获取各种任务来执行</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">for</span><span style="color:#002339;"> (;;) {	</span></span>
<span class="line"><span style="color:#002339;">      	</span><span style="color:#357B42;font-style:italic;">// 执行各种任务</span></span>
<span class="line"><span style="color:#002339;">   		</span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">strategy</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                strategy </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectStrategy</span><span style="color:#002339;">.</span><span style="color:#7EB233;">calculateStrategy</span><span style="color:#002339;">(selectNowSupplier, </span><span style="color:#7EB233;">hasTasks</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">switch</span><span style="color:#002339;"> (strategy) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">case</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectStrategy</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">CONTINUE</span><span style="color:#7B30D0;">:</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7B30D0;">continue</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">case</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectStrategy</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">BUSY_WAIT</span><span style="color:#7B30D0;">:</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#357B42;font-style:italic;">// fall-through to SELECT since the busy-wait is not supported with NIO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">case</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectStrategy</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">SELECT</span><span style="color:#7B30D0;">:</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#0991B6;">long</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">curDeadlineNanos</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">nextScheduledTaskDeadlineNanos</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (curDeadlineNanos </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">-</span><span style="color:#174781;">1L</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                        curDeadlineNanos </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> NONE; </span><span style="color:#357B42;font-style:italic;">// nothing on the calendar</span></span>
<span class="line"><span style="color:#002339;">                    }</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#2F86D2;">nextWakeupNanos</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(curDeadlineNanos);</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#7EB233;">hasTasks</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">                            strategy </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">select</span><span style="color:#002339;">(curDeadlineNanos);</span></span>
<span class="line"><span style="color:#002339;">                        }</span></span>
<span class="line"><span style="color:#002339;">                    } </span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                        </span><span style="color:#357B42;font-style:italic;">// This update is just to help block unnecessary selector wakeups</span></span>
<span class="line"><span style="color:#002339;">                        </span><span style="color:#357B42;font-style:italic;">// so use of lazySet is ok (no race condition)</span></span>
<span class="line"><span style="color:#002339;">                        </span><span style="color:#2F86D2;">nextWakeupNanos</span><span style="color:#002339;">.</span><span style="color:#7EB233;">lazySet</span><span style="color:#002339;">(AWAKE);</span></span>
<span class="line"><span style="color:#002339;">                    }</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#357B42;font-style:italic;">// fall through</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">default:</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">       		}</span></span>
<span class="line"><span style="color:#002339;">    	}</span></span>
<span class="line"><span style="color:#002339;">	}</span></span></code></pre></div><h4 id="唤醒" tabindex="-1">唤醒 <a class="header-anchor" href="#唤醒" aria-label="Permalink to &quot;唤醒&quot;">​</a></h4><p>NioEvnetLoop需要IO事件、普通任务以及定时任务，任务在run方法的for循环中</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectCnt</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 死循环，不断地从任务队列中获取各种任务来执行</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">for</span><span style="color:#002339;"> (;;) {</span></span>
<span class="line"><span style="color:#002339;">      	</span><span style="color:#357B42;font-style:italic;">// 执行各种任务</span></span>
<span class="line"><span style="color:#002339;">   		...</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>中被执行，但该循环不会空转，执行到某些代码时，会被阻塞</p><p>run方法中有SELECT分支</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7B30D0;">case</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectStrategy</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">SELECT</span><span style="color:#7B30D0;">:</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#0991B6;">long</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">curDeadlineNanos</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">nextScheduledTaskDeadlineNanos</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (curDeadlineNanos </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">-</span><span style="color:#174781;">1L</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        curDeadlineNanos </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> NONE; </span><span style="color:#357B42;font-style:italic;">// nothing on the calendar</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#2F86D2;">nextWakeupNanos</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(curDeadlineNanos);</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    	</span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#7EB233;">hasTasks</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 执行select方法</span></span>
<span class="line"><span style="color:#002339;">            strategy </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">select</span><span style="color:#002339;">(curDeadlineNanos);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span></code></pre></div><p>会执行NioEvnetLoop的select方法，该方法内部会根据情况，执行selector的有参和无参的select方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#7EB233;">select</span><span style="color:#002339;">(</span><span style="color:#0991B6;">long</span><span style="color:#002339;"> deadlineNanos) throws IOException {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 如果没有指定阻塞事件，就调用select()</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (deadlineNanos </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> NONE) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">select</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 否则调用select(timeoutMillis)，指定时间内未发生事件就停止阻塞</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// Timeout will only be 0 if deadline is within 5 microsecs</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">long</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">timeoutMillis</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">deadlineToDelayNanos</span><span style="color:#002339;">(deadlineNanos </span><span style="color:#7B30D0;">+</span><span style="color:#002339;"> </span><span style="color:#174781;">995000L</span><span style="color:#002339;">) </span><span style="color:#7B30D0;">/</span><span style="color:#002339;"> </span><span style="color:#174781;">1000000L</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> timeoutMillis </span><span style="color:#7B30D0;">&lt;=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">?</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">selectNow</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">select</span><span style="color:#002339;">(timeoutMillis);</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>但需要注意的是，select方法是会阻塞线程的，当没有IO事件，但有其他任务需要执行时，需要唤醒线程</p><p>唤醒是通过execute最后的if代码块来完成的</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 有任务需要被执行时，唤醒阻塞的NIO线程</span></span>
<span class="line"><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">addTaskWakesUp </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> immediate) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">wakeup</span><span style="color:#002339;">(inEventLoop);</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>NioEventLoop.wakeup唤醒被selector.select方法阻塞的NIO线程</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">wakeup</span><span style="color:#002339;">(</span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> inEventLoop) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 只有当其他线程给当前NIO线程提交任务时（如执行execute），才会被唤醒</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 通过AtomicLong进行更新，保证每次只能有一个线程唤醒成功</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">inEventLoop </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">nextWakeupNanos</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getAndSet</span><span style="color:#002339;">(AWAKE) </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> AWAKE) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 唤醒被selector.select方法阻塞的NIO线程</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">wakeup</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>唤醒时需要进行两个判断</p><ul><li>判断提交任务的是否为NIO线程 <ul><li>若是其他线程，才能唤醒NIO线程</li><li>若是NIO线程自己，则不能唤醒</li></ul></li><li>通过 <code>AtomicLong</code> 保证有多个线程同时提交任务时，只有一个线程能够唤醒NIO线程</li></ul><h4 id="select分支" tabindex="-1">SELECT分支 <a class="header-anchor" href="#select分支" aria-label="Permalink to &quot;SELECT分支&quot;">​</a></h4><p>run方法的switch语句有多条分支，具体执行分支的代码由strategy变量控制</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">strategy</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectStrategy</span><span style="color:#002339;">.</span><span style="color:#7EB233;">calculateStrategy</span><span style="color:#002339;">(selectNowSupplier, </span><span style="color:#7EB233;">hasTasks</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#7B30D0;">switch</span><span style="color:#002339;"> (strategy) {</span></span>
<span class="line"><span style="color:#002339;">	...</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>strategy的值由calculateStrategy方法确定</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#7EB233;">calculateStrategy</span><span style="color:#002339;">(</span><span style="color:#0991B6;">IntSupplier</span><span style="color:#002339;"> selectSupplier, </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> hasTasks) throws Exception {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// selectSupplier.get() 底层是 selector.selectNow();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> hasTasks </span><span style="color:#7B30D0;">?</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectSupplier</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectStrategy</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">SELECT</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>该方法会根据hasTaks变量判断任务队列中是否有任务</p><ul><li>若有任务，则通过selectSupplier获得strategy的值 <ul><li>get方法会selectNow方法，顺便拿到IO事件</li></ul></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">IntSupplier</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectNowSupplier</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">IntSupplier</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#7EB233;">get</span><span style="color:#002339;">() </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Exception</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">NioEventLoop</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">this</span><span style="color:#002339;">.</span><span style="color:#7EB233;">selectNow</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#7EB233;">selectNow</span><span style="color:#002339;">() throws IOException {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">selectNow</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><ul><li>没有任务，就会进入SELECT分支</li></ul><p>也就说，当任务队列中没有任务时，才会进入SELECT分支，让NIO线程阻塞，而不是空转。若有任务，则会通过get方法调用selector.selectNow方法，顺便拿到IO事件</p><h3 id="java-nio空轮询bug" tabindex="-1">Java NIO空轮询BUG <a class="header-anchor" href="#java-nio空轮询bug" aria-label="Permalink to &quot;Java NIO空轮询BUG&quot;">​</a></h3><p>Java NIO空轮询BUG也就是JavaNIO在Linux系统下的epoll空轮询问题</p><p>在NioEventLoop中，因为run方法中存在一个死循环，需要通过selector.select方法来阻塞线程。但是select方法因为BUG，可能无法阻塞线程，导致循环一直执行，使得CPU负载升高</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    ...</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">for</span><span style="color:#002339;">(;;){</span></span>
<span class="line"><span style="color:#002339;">        ...</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 可能发生空轮询，无法阻塞NIO线程</span></span>
<span class="line"><span style="color:#002339;">        strategy </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">select</span><span style="color:#002339;">(curDeadlineNanos);  </span></span>
<span class="line"><span style="color:#002339;">        ...     </span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">     	</span><span style="color:#7B30D0;">if</span><span style="color:#002339;">(...) {</span></span>
<span class="line"><span style="color:#002339;">			...</span></span>
<span class="line"><span style="color:#002339;">     	} </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7EB233;">unexpectedSelectorWakeup</span><span style="color:#002339;">(selectCnt) ){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 通过unexpectedSelectorWakeup方法中的rebuildSelector重建selector</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 并将selectCnt重置为0</span></span>
<span class="line"><span style="color:#002339;">            selectCnt </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">	}</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>Netty中通过selectCnt变量来检测select方法是否发生空轮询BUG</p><p>若发生空轮询BUG，那么selectCnt的值会增长是十分迅速。当selectCnt的值大于等于SELECTOR_AUTO_REBUILD_THRESHOLD（默认512）时，Netty则判断其出现了空轮询BUG，进行如下处理</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (SELECTOR_AUTO_REBUILD_THRESHOLD </span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> selectCnt </span><span style="color:#7B30D0;">&gt;=</span><span style="color:#002339;"> SELECTOR_AUTO_REBUILD_THRESHOLD) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// The selector returned prematurely many times in a row.</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// Rebuild the selector to work around the problem.</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">logger</span><span style="color:#002339;">.</span><span style="color:#7EB233;">warn</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;Selector.select() returned prematurely {} times in a row; rebuilding Selector {}.&quot;</span><span style="color:#002339;">,selectCnt, selector);</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 重建selector，将原selector的配置信息传给新selector</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 再用新selector覆盖旧selector</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">rebuildSelector</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#174781;">true</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>通过rebuildSelector方法重建selector，将原selector的配置信息传给新selector，再用新selector覆盖旧selector。同时将selectCnt的值设置为0</p><h3 id="ioratio" tabindex="-1">ioRatio <a class="header-anchor" href="#ioratio" aria-label="Permalink to &quot;ioRatio&quot;">​</a></h3><p>NioEventLoop可以处理IO事件和其他任务。不同的操作所耗费的时间是不同的，想要控制NioEventLoop处理IO事件花费时间占执行所有操作的总时间的比例，需要通过ioRatio来控制</p><p>NioEventLoop.run方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 处理IO事件时间比例，默认为50%</span></span>
<span class="line"><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ioRatio</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">ioRatio</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 如果IO事件时间比例设置为100%</span></span>
<span class="line"><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (ioRatio </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#174781;">100</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 如果需要去处理IO事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (strategy </span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 先处理IO事件</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">processSelectedKeys</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// Ensure we always run tasks.</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 剩下的时间都去处理普通任务和定时任务</span></span>
<span class="line"><span style="color:#002339;">        ranTasks </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">runAllTasks</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">} </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (strategy </span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) { </span><span style="color:#357B42;font-style:italic;">// 如果需要去处理IO事件</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 记录处理IO事件前的时间</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">long</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ioStartTime</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">System</span><span style="color:#002339;">.</span><span style="color:#7EB233;">nanoTime</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 去处理IO事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">processSelectedKeys</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// Ensure we always run tasks.</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// ioTime为处理IO事件耗费的事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">long</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ioTime</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">System</span><span style="color:#002339;">.</span><span style="color:#7EB233;">nanoTime</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">-</span><span style="color:#002339;"> ioStartTime;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 计算出处理其他任务的事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 超过设定的时间后，将会停止任务的执行，会在下一次循环中再继续执行</span></span>
<span class="line"><span style="color:#002339;">        ranTasks </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">runAllTasks</span><span style="color:#002339;">(ioTime </span><span style="color:#7B30D0;">*</span><span style="color:#002339;"> (</span><span style="color:#174781;">100</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">-</span><span style="color:#002339;"> ioRatio) </span><span style="color:#7B30D0;">/</span><span style="color:#002339;"> ioRatio);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">} </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> { </span><span style="color:#357B42;font-style:italic;">// 没有IO事件需要处理</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// This will run the minimum number of tasks</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 直接处理普通和定时任务</span></span>
<span class="line"><span style="color:#002339;">    ranTasks </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">runAllTasks</span><span style="color:#002339;">(</span><span style="color:#174781;">0</span><span style="color:#002339;">); </span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>通过ioRatio控制各个任务执行的过程如下</p><ul><li>判断ioRatio是否为100 <ul><li>若是，判断是否需要处理IO事件（strategy&gt;0） <ul><li>若需要处理IO事件，则先处理IO事件</li></ul></li><li>若否（或IO事件已经处理完毕），接下来去执行所有的普通任务和定时任务，直到所有任务都被处理完</li></ul></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 没有指定执行任务的时间</span></span>
<span class="line"><span style="color:#002339;">ranTasks </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">runAllTasks</span><span style="color:#002339;">();</span></span></code></pre></div><p>若ioRatio不为100</p><ul><li>先去处理IO事件，记录处理IO事件所花费的事件保存在ioTime中</li><li>接下来去处理其他任务，根据ioTime与ioRatio计算执行其他任务可用的时间</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 比如ioTime为10s，ioRatio为50</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 那么通过 10*(100-50)/50=10 计算出其他任务可用的时间为 10s</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// 处理IO事件占用的事件总比例为50%</span></span>
<span class="line"><span style="color:#002339;">ranTasks </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">runAllTasks</span><span style="color:#002339;">(ioTime </span><span style="color:#7B30D0;">*</span><span style="color:#002339;"> (</span><span style="color:#174781;">100</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">-</span><span style="color:#002339;"> ioRatio) </span><span style="color:#7B30D0;">/</span><span style="color:#002339;"> ioRatio);</span></span></code></pre></div><ul><li>执行其他任务一旦超过可用时间，则会停止执行，在下一次循环中再继续执行</li><li>若没有IO事件需要处理，则去执行最少数量的普通任务和定时任务</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 运行最少数量的任务</span></span>
<span class="line"><span style="color:#002339;">ranTasks </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">runAllTasks</span><span style="color:#002339;">(</span><span style="color:#174781;">0</span><span style="color:#002339;">);</span></span></code></pre></div><h3 id="处理事件" tabindex="-1">处理事件 <a class="header-anchor" href="#处理事件" aria-label="Permalink to &quot;处理事件&quot;">​</a></h3><p>IO事件是通过NioEventLoop.processSelectedKeys()方法处理的</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">processSelectedKeys</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 如果selectedKeys是基于数组的</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 一般情况下都走这个分支</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (selectedKeys </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 处理各种IO事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">processSelectedKeysOptimized</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">processSelectedKeysPlain</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">selectedKeys</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>processSelectedKeysOptimized方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">processSelectedKeysOptimized</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">for</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">i</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">; i </span><span style="color:#7B30D0;">&lt;</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectedKeys</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">size</span><span style="color:#002339;">; </span><span style="color:#7B30D0;">++</span><span style="color:#002339;">i) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 拿到SelectionKeyec</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">k</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectedKeys</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">keys</span><span style="color:#002339;">[i];</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// null out entry in the array to allow to have it GC&#39;ed once the Channel close</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// See https://github.com/netty/netty/issues/2363</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">selectedKeys</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">keys</span><span style="color:#002339;">[i] </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 获取SelectionKey上的附件，即NioServerSocketChannel</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Object</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">a</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">k</span><span style="color:#002339;">.</span><span style="color:#7EB233;">attachment</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (a </span><span style="color:#7B30D0;">instanceof</span><span style="color:#002339;"> AbstractNioChannel) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 处理事件，传入附件NioServerSocketChannel</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">processSelectedKey</span><span style="color:#002339;">(k, (AbstractNioChannel) a);</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            @</span><span style="color:#0991B6;">SuppressWarnings</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;unchecked&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">NioTask</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">SelectableChannel</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">task</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">NioTask</span><span style="color:#7B30D0;">&lt;</span><span style="color:#002339;">SelectableChannel</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;">) a;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">processSelectedKey</span><span style="color:#002339;">(k, task);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (needsToSelectAgain) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// null out entries in the array to allow to have it GC&#39;ed once the Channel close</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// See https://github.com/netty/netty/issues/2363</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">selectedKeys</span><span style="color:#002339;">.</span><span style="color:#7EB233;">reset</span><span style="color:#002339;">(i </span><span style="color:#7B30D0;">+</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">selectAgain</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            i </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">-</span><span style="color:#174781;">1</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>该方法中通过fori的方法，遍历基于数组的SelectedKey，通过</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">k</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectedKeys</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">keys</span><span style="color:#002339;">[i];</span></span></code></pre></div><p>获取到SelectionKey，<strong>然后获取其再Register时添加的附件NioServerSocketChannel</strong></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 获取SelectionKey上的附件，即NioServerSocketChannel</span></span>
<span class="line"><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Object</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">a</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">k</span><span style="color:#002339;">.</span><span style="color:#7EB233;">attachment</span><span style="color:#002339;">();</span></span></code></pre></div><p>如果附件继承自AbstractNioChannel，则会调用</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 处理事件，传入附件NioServerSocketChannel</span></span>
<span class="line"><span style="color:#7EB233;">processSelectedKey</span><span style="color:#002339;">(k, (AbstractNioChannel) a);</span></span></code></pre></div><p>去处理各个事件</p><p>真正处理各种事件的方法processSelectedKey</p><p>获取SelectionKey的事件，然后进行相应处理</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">processSelectedKey</span><span style="color:#002339;">(</span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;"> k, </span><span style="color:#0991B6;">AbstractNioChannel</span><span style="color:#002339;"> ch) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">AbstractNioChannel</span><span style="color:#002339;">.</span><span style="color:#0991B6;">NioUnsafe</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ch</span><span style="color:#002339;">.</span><span style="color:#7EB233;">unsafe</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">k</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isValid</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">EventLoop</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            eventLoop </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ch</span><span style="color:#002339;">.</span><span style="color:#7EB233;">eventLoop</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">ignored</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// If the channel implementation throws an exception because there is no event loop, we ignore this</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// because we are only trying to determine if ch is registered to this event loop and thus has authority</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// to close ch.</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// still healthy and should not be closed.</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// See https://github.com/netty/netty/issues/5125</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (eventLoop </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#000000;">this</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// close the channel if the key is not valid anymore</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">close</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">voidPromise</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">readyOps</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">k</span><span style="color:#002339;">.</span><span style="color:#7EB233;">readyOps</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// the NIO JDK channel implementation may throw a NotYetConnectedException.</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> ((readyOps </span><span style="color:#7B30D0;">&amp;</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_CONNECT</span><span style="color:#002339;">) </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// See https://github.com/netty/netty/issues/924</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ops</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">k</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            ops </span><span style="color:#7B30D0;">&amp;=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">~</span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_CONNECT</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">k</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">(ops);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">finishConnect</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// Process OP_WRITE first as we may be able to write some queued buffers and so free memory.</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> ((readyOps </span><span style="color:#7B30D0;">&amp;</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_WRITE</span><span style="color:#002339;">) </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">ch</span><span style="color:#002339;">.</span><span style="color:#7EB233;">unsafe</span><span style="color:#002339;">().</span><span style="color:#7EB233;">forceFlush</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// to a spin loop</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> ((readyOps </span><span style="color:#7B30D0;">&amp;</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_READ</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_ACCEPT</span><span style="color:#002339;">)) </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">||</span><span style="color:#002339;"> readyOps </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">read</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">CancelledKeyException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">ignored</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">close</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">voidPromise</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><h2 id="accept剖析" tabindex="-1">Accept剖析 <a class="header-anchor" href="#accept剖析" aria-label="Permalink to &quot;Accept剖析&quot;">​</a></h2><h3 id="nio中处理accept事件流程" tabindex="-1">NIO中处理Accept事件流程 <a class="header-anchor" href="#nio中处理accept事件流程" aria-label="Permalink to &quot;NIO中处理Accept事件流程&quot;">​</a></h3><ul><li>selector.select()阻塞线程，直到事件发生</li><li>遍历selectionKeys</li><li>获取一个key，判断事件类型是否为Accept</li></ul><hr><ul><li>创建SocketChannel，设置为非阻塞</li><li>将SocketChannel注册到selector中</li><li>关注selectionKeys的read事件</li></ul><p>代码如下</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">// 阻塞直到事件发生</span></span>
<span class="line"><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">select</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">Iterator</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">iter</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selector</span><span style="color:#002339;">.</span><span style="color:#7EB233;">selectionKeys</span><span style="color:#002339;">().</span><span style="color:#7EB233;">iterator</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#7B30D0;">while</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">iter</span><span style="color:#002339;">.</span><span style="color:#7EB233;">hasNext</span><span style="color:#002339;">()) {    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 拿到一个事件</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">key</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">iter</span><span style="color:#002339;">.</span><span style="color:#7EB233;">next</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 如果是 accept 事件</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">key</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isAcceptable</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 执行accept，获得SocketChannel</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">SocketChannel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">serverSocketChannel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">accept</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">configureBlocking</span><span style="color:#002339;">(</span><span style="color:#174781;">false</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 将SocketChannel注册到selector中，并关注read事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">channel</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(selector, </span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_READ</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>其中前三步，在NioEventLoop剖析中已经分析过了，所以接下来主要分析后三步</p><h3 id="socketchannel的创建与注册" tabindex="-1">SocketChannel的创建与注册 <a class="header-anchor" href="#socketchannel的创建与注册" aria-label="Permalink to &quot;SocketChannel的创建与注册&quot;">​</a></h3><p>发生Accept事件后，会执行NioEventLoop.run方法的如下if分支</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7B30D0;">if</span><span style="color:#002339;"> ((readyOps </span><span style="color:#7B30D0;">&amp;</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_READ</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_ACCEPT</span><span style="color:#002339;">)) </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">||</span><span style="color:#002339;"> readyOps </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">read</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>NioMessageUnsafe.read方法</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">read</span><span style="color:#002339;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    ...</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">do</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">				</span><span style="color:#357B42;font-style:italic;">// doReadMessages中执行了accept获得了SocketChannel</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 并创建NioSocketChannel作为消息放入readBuf</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// readBuf是一个ArrayList用来缓存消息</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// private final List&lt;Object&gt; readBuf = new ArrayList&lt;Object&gt;();</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">localRead</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doReadMessages</span><span style="color:#002339;">(readBuf);</span></span>
<span class="line"><span style="color:#002339;">                </span></span>
<span class="line"><span style="color:#002339;">                ...</span></span>
<span class="line"><span style="color:#002339;">                </span></span>
<span class="line"><span style="color:#002339;">				</span><span style="color:#357B42;font-style:italic;">// localRead值为1，就一条消息，即接收一个客户端连接</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">incMessagesRead</span><span style="color:#002339;">(localRead);</span></span>
<span class="line"><span style="color:#002339;">            } </span><span style="color:#7B30D0;">while</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">continueReading</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            exception </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> t;</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">size</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">readBuf</span><span style="color:#002339;">.</span><span style="color:#7EB233;">size</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">for</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">i</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">; i </span><span style="color:#7B30D0;">&lt;</span><span style="color:#002339;"> size; i </span><span style="color:#7B30D0;">++</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            readPending </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 触发read事件，让pipeline上的handler处理</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// ServerBootstrapAcceptor.channelRead</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fireChannelRead</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">readBuf</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">(i));</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        ...</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">readPending </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isAutoRead</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">removeReadOp</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>NioSocketChannel.doReadMessages方法<br>该方法中处理accpet事件，获得SocketChannel，同时创建了NioSocketChannel，作为消息放在了readBuf中</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doReadMessages</span><span style="color:#002339;">(</span><span style="color:#0991B6;">List</span><span style="color:#7B30D0;">&lt;</span><span style="color:#002339;">Object</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> buf) throws Exception {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 处理accpet事件，获得SocketChannel</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">SocketChannel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ch</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SocketUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">accept</span><span style="color:#002339;">(</span><span style="color:#7EB233;">javaChannel</span><span style="color:#002339;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (ch </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 创建了NioSocketChannel，作为消息放在了readBuf中</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">buf</span><span style="color:#002339;">.</span><span style="color:#7EB233;">add</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">NioSocketChannel</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">, ch));</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">       ...</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>ServerBootstrapAcceptor.channelRead</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">channelRead</span><span style="color:#002339;">(</span><span style="color:#0991B6;">ChannelHandlerContext</span><span style="color:#002339;"> ctx, </span><span style="color:#0991B6;">Object</span><span style="color:#002339;"> msg) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 这时的msg是NioSocketChannel</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Channel</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">child</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (Channel) msg;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// NioSocketChannel添加childHandler，即初始化器</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">child</span><span style="color:#002339;">.</span><span style="color:#7EB233;">pipeline</span><span style="color:#002339;">().</span><span style="color:#7EB233;">addLast</span><span style="color:#002339;">(childHandler);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 设置选项</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">setChannelOptions</span><span style="color:#002339;">(child, childOptions, logger);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">for</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Entry</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">AttributeKey</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">?</span><span style="color:#002339;">&gt;, </span><span style="color:#0991B6;">Object</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">e</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> childAttrs) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">child</span><span style="color:#002339;">.</span><span style="color:#7EB233;">attr</span><span style="color:#002339;">((</span><span style="color:#0991B6;">AttributeKey</span><span style="color:#7B30D0;">&lt;</span><span style="color:#002339;">Object</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;">) </span><span style="color:#2F86D2;">e</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getKey</span><span style="color:#002339;">()).</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">e</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getValue</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 注册 NioSocketChannel到nio worker线程，接下来的处理也移交至nio worker线程</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">childGroup</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(child).</span><span style="color:#7EB233;">addListener</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ChannelFutureListener</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">            @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">operationComplete</span><span style="color:#002339;">(</span><span style="color:#0991B6;">ChannelFuture</span><span style="color:#002339;"> </span><span style="color:#B1108E;">future</span><span style="color:#002339;">) </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">Exception</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">future</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isSuccess</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7EB233;">forceClose</span><span style="color:#002339;">(child, </span><span style="color:#2F86D2;">future</span><span style="color:#002339;">.</span><span style="color:#7EB233;">cause</span><span style="color:#002339;">());</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">        });</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">forceClose</span><span style="color:#002339;">(child, t);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>通过AbstractUnsafe.register 方法，将SocketChannel注册到了Selector中，过程与启动流程中的Register过程类似</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#0991B6;">EventLoop</span><span style="color:#002339;"> eventLoop, </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelPromise</span><span style="color:#002339;"> promise) {</span></span>
<span class="line"><span style="color:#002339;">    </span></span>
<span class="line"><span style="color:#002339;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">AbstractChannel</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> eventLoop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;">.</span><span style="color:#7EB233;">inEventLoop</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">register0</span><span style="color:#002339;">(promise);</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 这行代码完成的是nio boss -&gt; nio worker线程的切换</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">eventLoop</span><span style="color:#002339;">.</span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">Runnable</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">                @</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">run</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#357B42;font-style:italic;">// 真正的注册操作</span></span>
<span class="line"><span style="color:#002339;">                    </span><span style="color:#7EB233;">register0</span><span style="color:#002339;">(promise);</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">            });</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            ...</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>AbstractChannel.AbstractUnsafe.register0</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">register0</span><span style="color:#002339;">(</span><span style="color:#0991B6;">ChannelPromise</span><span style="color:#002339;"> promise) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        ...</span></span>
<span class="line"><span style="color:#002339;">            </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 该方法将SocketChannel注册到Selector中</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">doRegister</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 执行初始化器，执行前 pipeline 中只有 head -&gt; 初始化器 -&gt; tail</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">invokeHandlerAddedIfNeeded</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 执行后就是 head -&gt; logging handler -&gt; my handler -&gt; tail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">safeSetSuccess</span><span style="color:#002339;">(promise);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fireChannelRegistered</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7EB233;">isActive</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (firstRegistration) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 触发pipeline上active事件</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fireChannelActive</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            } </span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7EB233;">config</span><span style="color:#002339;">().</span><span style="color:#7EB233;">isAutoRead</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7EB233;">beginRead</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">closeForcibly</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">closeFuture</span><span style="color:#002339;">.</span><span style="color:#7EB233;">setClosed</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">safeSetFailure</span><span style="color:#002339;">(promise, t);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>AbstractNioChannel.doRegister将SocketChannel注册到Selector中</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doRegister</span><span style="color:#002339;">() throws Exception {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selected</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">for</span><span style="color:#002339;"> (;;) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 将Selector注册到Selector中</span></span>
<span class="line"><span style="color:#002339;">            selectionKey </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">javaChannel</span><span style="color:#002339;">().</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#7EB233;">eventLoop</span><span style="color:#002339;">().</span><span style="color:#7EB233;">unwrappedSelector</span><span style="color:#002339;">(), </span><span style="color:#174781;">0</span><span style="color:#002339;">, </span><span style="color:#000000;">this</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">CancelledKeyException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">            ...</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>HeadContext.channelActive</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">channelActive</span><span style="color:#002339;">(</span><span style="color:#0991B6;">ChannelHandlerContext</span><span style="color:#002339;"> ctx) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">ctx</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fireChannelActive</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#357B42;font-style:italic;">// 触发read(NioSocketChannel这里read只是为了触发channel的事件注册，还未涉及数据读取)</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7EB233;">readIfIsAutoRead</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>AbstractNioChannel.doBeginRead，通过该方法，SocketChannel关注了read事件</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">doBeginRead</span><span style="color:#002339;">() throws Exception {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// Channel.read() or ChannelHandlerContext.read() was called</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">SelectionKey</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isValid</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    readPending </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">true</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#357B42;font-style:italic;">// 这时候 interestOps是0</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">int</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">interestOps</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> ((interestOps </span><span style="color:#7B30D0;">&amp;</span><span style="color:#002339;"> readInterestOp) </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 关注read事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">selectionKey</span><span style="color:#002339;">.</span><span style="color:#7EB233;">interestOps</span><span style="color:#002339;">(interestOps </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> readInterestOp);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><h2 id="read剖析" tabindex="-1">Read剖析 <a class="header-anchor" href="#read剖析" aria-label="Permalink to &quot;Read剖析&quot;">​</a></h2><p>read事件的处理也是在</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7B30D0;">if</span><span style="color:#002339;"> ((readyOps </span><span style="color:#7B30D0;">&amp;</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_READ</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">SelectionKey</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">OP_ACCEPT</span><span style="color:#002339;">)) </span><span style="color:#7B30D0;">!=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">||</span><span style="color:#002339;"> readyOps </span><span style="color:#7B30D0;">==</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#2F86D2;">unsafe</span><span style="color:#002339;">.</span><span style="color:#7EB233;">read</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>分支中，通过unsafe.read()方法处理的，不过此处调用的方法在AbstractNioByteChannel.NioByteUnsafe类中</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Override</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">read</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 获得Channel的配置</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelConfig</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">config</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7EB233;">shouldBreakReadReady</span><span style="color:#002339;">(config)) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">clearReadPending</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ChannelPipeline</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">pipeline</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#357B42;font-style:italic;">// 根据配置创建ByteBufAllocator（池化非池化、直接非直接内存）</span></span>
<span class="line"><span style="color:#002339;">	</span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ByteBufAllocator</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">allocator</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getAllocator</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 用来分配 byteBuf，确定单次读取大小</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">RecvByteBufAllocator</span><span style="color:#002339;">.</span><span style="color:#0991B6;">Handle</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">recvBufAllocHandle</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">reset</span><span style="color:#002339;">(config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">ByteBuf</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">byteBuf</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">close</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">do</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 创建ByteBuf</span></span>
<span class="line"><span style="color:#002339;">            byteBuf </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">allocate</span><span style="color:#002339;">(allocator);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 读取内容，放入ByteBUf中</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">lastBytesRead</span><span style="color:#002339;">(</span><span style="color:#7EB233;">doReadBytes</span><span style="color:#002339;">(byteBuf));</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">lastBytesRead</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">&lt;=</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">byteBuf</span><span style="color:#002339;">.</span><span style="color:#7EB233;">release</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">                byteBuf </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">                close </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">lastBytesRead</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">&lt;</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (close) {</span></span>
<span class="line"><span style="color:#002339;">                    readPending </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">                }</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#7B30D0;">break</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">incMessagesRead</span><span style="color:#002339;">(</span><span style="color:#174781;">1</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            readPending </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">false</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 触发read 事件，让pipeline上的handler处理</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 这时是处理NioSocketChannel上的handler</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fireChannelRead</span><span style="color:#002339;">(byteBuf);</span></span>
<span class="line"><span style="color:#002339;">            byteBuf </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        } </span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 是否要继续循环</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">while</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">continueReading</span><span style="color:#002339;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">allocHandle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">readComplete</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 触发 read complete事件</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">pipeline</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fireChannelReadComplete</span><span style="color:#002339;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (close) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">closeOnRead</span><span style="color:#002339;">(pipeline);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Throwable</span><span style="color:#002339;"> </span><span style="color:#B1108E;">t</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7EB233;">handleReadException</span><span style="color:#002339;">(pipeline, byteBuf, t, close, allocHandle);</span></span>
<span class="line"><span style="color:#002339;">    } </span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;">// Check if there is a readPending which was not processed yet.</span></span>
<span class="line"><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;">// This could be for two reasons:</span></span>
<span class="line"><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;">// * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method</span></span>
<span class="line"><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;">// * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method</span></span>
<span class="line"><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;">//</span></span>
<span class="line"><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;">// See https://github.com/netty/netty/issues/2254</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">readPending </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isAutoRead</span><span style="color:#002339;">()) {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">removeReadOp</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle.continueReading(io.netty.util.UncheckedBooleanSupplier)</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#7EB233;">continueReading</span><span style="color:#002339;">(</span><span style="color:#0991B6;">UncheckedBooleanSupplier</span><span style="color:#002339;"> maybeMoreDataSupplier) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span></span>
<span class="line"><span style="color:#002339;">           </span><span style="color:#357B42;font-style:italic;">// 一般为true</span></span>
<span class="line"><span style="color:#002339;">           </span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isAutoRead</span><span style="color:#002339;">() </span><span style="color:#7B30D0;">&amp;&amp;</span></span>
<span class="line"><span style="color:#002339;">           </span><span style="color:#357B42;font-style:italic;">// respectMaybeMoreData默认为true</span></span>
<span class="line"><span style="color:#002339;">           </span><span style="color:#357B42;font-style:italic;">// maybeMoreDataSupplier的逻辑是如果预期读取字节与实际读取字节相等，返回true</span></span>
<span class="line"><span style="color:#002339;">           (</span><span style="color:#7B30D0;">!</span><span style="color:#002339;">respectMaybeMoreData </span><span style="color:#7B30D0;">||</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">maybeMoreDataSupplier</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">()) </span><span style="color:#7B30D0;">&amp;&amp;</span></span>
<span class="line"><span style="color:#002339;">           </span><span style="color:#357B42;font-style:italic;">// 小于最大次数，maxMessagePerRead默认16</span></span>
<span class="line"><span style="color:#002339;">           totalMessages </span><span style="color:#7B30D0;">&lt;</span><span style="color:#002339;"> maxMessagePerRead </span><span style="color:#7B30D0;">&amp;&amp;</span></span>
<span class="line"><span style="color:#002339;">           </span><span style="color:#357B42;font-style:italic;">// 实际读到了数据</span></span>
<span class="line"><span style="color:#002339;">           totalBytesRead </span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div>`,197),t=[e];function c(r,y,i,B,d,D){return n(),a("div",null,t)}const v=s(o,[["render",c]]);export{h as __pageData,v as default};
