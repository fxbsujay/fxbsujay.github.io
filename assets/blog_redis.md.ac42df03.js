import{_ as n,o as a,c as l,Q as p}from"./chunks/framework.4cf23e62.js";const o="/doc/redis/img-7.png",e="/doc/redis/img-8.png",t="/doc/redis/img-9.png",c="/doc/redis/img-0.png",r="/doc/redis/img-2.png",y="/doc/redis/img-1.png",s="/doc/redis/img-2.png",i="/doc/redis/img-5.png",B="/doc/redis/img-6.png",d="/doc/redis/img-10.png",u="/doc/redis/img-11.png",g="/doc/redis/img-12.png",f="/doc/redis/img-13.png",D="/doc/redis/img-14.png",h="/doc/redis/img-15.png",A="/doc/redis/img-16.png",k="/doc/redis/img-17.png",m="/doc/redis/img-18.png",E="/doc/redis/img-19.png",b="/doc/redis/img-20.png",v="/doc/redis/img-21.png",O=JSON.parse('{"title":"Redis 学习文档","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/redis.md","filePath":"blog/redis.md","lastUpdated":1687248801000}'),q={name:"blog/redis.md"},R=p(`<h1 id="redis-学习文档" tabindex="-1">Redis 学习文档 <a class="header-anchor" href="#redis-学习文档" aria-label="Permalink to &quot;Redis 学习文档&quot;">​</a></h1><p><a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noreferrer">Redis</a> 支持数据持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 不仅仅支持简单的 key - value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储，支持数据的备份，即 master - slave 模式的数据备份</p><p>性能极高：Redis 读的速度是 110000 次 /s, 写的速度是 81000 次 /s</p><p>数据类型：Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作</p><p>原子性：Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行，单个操作是原子性的，多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来</p><p>其他特性：Redis 还支持 publish/subscribe 通知，key 过期等特性</p><h2 id="redis基本命令" tabindex="-1">redis基本命令 <a class="header-anchor" href="#redis基本命令" aria-label="Permalink to &quot;redis基本命令&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#1AB394;">set</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#A44185;">value</span><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;"># 存储key</span></span>
<span class="line"><span style="color:#7EB233;">get</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;">              </span><span style="color:#357B42;font-style:italic;"># 查询key</span></span>
<span class="line"><span style="color:#7EB233;">dbsize</span><span style="color:#002339;">		         </span><span style="color:#357B42;font-style:italic;"># 查看库的大小</span></span>
<span class="line"><span style="color:#7B30D0;">select</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">index</span><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;"># 开打库</span></span>
<span class="line"><span style="color:#7EB233;">keys</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">*</span><span style="color:#002339;">		         </span><span style="color:#357B42;font-style:italic;"># 查看库的所有key</span></span>
<span class="line"><span style="color:#7EB233;">flusdb</span><span style="color:#002339;">		         </span><span style="color:#357B42;font-style:italic;"># 清空库</span></span>
<span class="line"><span style="color:#7EB233;">flusall</span><span style="color:#002339;">		         </span><span style="color:#357B42;font-style:italic;"># 清空所有库</span></span>
<span class="line"><span style="color:#7EB233;">EXISTS</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;">	         </span><span style="color:#357B42;font-style:italic;"># 查看是否存在</span></span>
<span class="line"><span style="color:#7EB233;">move</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span><span style="color:#002339;">	         </span><span style="color:#357B42;font-style:italic;"># 移除当前数据库的key</span></span>
<span class="line"><span style="color:#7EB233;">expire</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">10</span><span style="color:#002339;">	     </span><span style="color:#357B42;font-style:italic;"># 设置过期时间(秒)，到期自动清除</span></span>
<span class="line"><span style="color:#7EB233;">ttl</span><span style="color:#002339;">	</span><span style="color:#A44185;">key</span><span style="color:#002339;">			     </span><span style="color:#357B42;font-style:italic;"># 查看剩余时间</span></span>
<span class="line"><span style="color:#1AB394;">type</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;">		     </span><span style="color:#357B42;font-style:italic;"># 查看数据类型</span></span>
<span class="line"><span style="color:#7EB233;">append</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#A44185;">value</span><span style="color:#002339;">     </span><span style="color:#357B42;font-style:italic;"># 往这个key的value后面进行追加</span></span>
<span class="line"><span style="color:#7EB233;">strlen</span><span style="color:#002339;">	</span><span style="color:#A44185;">key</span><span style="color:#002339;">		     </span><span style="color:#357B42;font-style:italic;"># 查看字符串的长度</span></span>
<span class="line"><span style="color:#7EB233;">incr</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;">		     </span><span style="color:#357B42;font-style:italic;"># 自增加一</span></span>
<span class="line"><span style="color:#7EB233;">decr</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;">		     </span><span style="color:#357B42;font-style:italic;"># 自动减一</span></span>
<span class="line"><span style="color:#7EB233;">incrby</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">10</span><span style="color:#002339;">	     </span><span style="color:#357B42;font-style:italic;"># 设置步长，指定增量</span></span>
<span class="line"><span style="color:#7EB233;">decrby</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">5</span><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;"># 设置减量</span></span>
<span class="line"><span style="color:#7EB233;">getrange</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#174781;">3</span><span style="color:#002339;">     </span><span style="color:#357B42;font-style:italic;"># 截取字符串，从0到3</span></span>
<span class="line"><span style="color:#7EB233;">getrange</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#174781;">-1</span><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;"># 截取所有的字符串</span></span>
<span class="line"><span style="color:#7EB233;">setrange</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;x&quot;</span><span style="color:#002339;">   </span><span style="color:#357B42;font-style:italic;"># 从1开始替换</span></span>
<span class="line"><span style="color:#7EB233;">setex</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#174781;">30</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;hello&quot;</span><span style="color:#002339;"> </span><span style="color:#357B42;font-style:italic;"># 如果key不存在，创建，存在创建失败</span></span>
<span class="line"><span style="color:#7EB233;">mset</span><span style="color:#002339;"> </span><span style="color:#A44185;">k1</span><span style="color:#002339;"> </span><span style="color:#A44185;">v1</span><span style="color:#002339;"> </span><span style="color:#A44185;">k2</span><span style="color:#002339;"> </span><span style="color:#A44185;">v2</span><span style="color:#002339;">     </span><span style="color:#357B42;font-style:italic;"># 批量添加</span></span>
<span class="line"><span style="color:#7EB233;">mget</span><span style="color:#002339;"> </span><span style="color:#A44185;">k1</span><span style="color:#002339;"> </span><span style="color:#A44185;">k2</span><span style="color:#002339;">		     </span><span style="color:#357B42;font-style:italic;"># 批量获取</span></span>
<span class="line"><span style="color:#7EB233;">msetnx</span><span style="color:#002339;"> </span><span style="color:#A44185;">k1</span><span style="color:#002339;"> </span><span style="color:#A44185;">v1</span><span style="color:#002339;"> </span><span style="color:#A44185;">k2</span><span style="color:#002339;"> </span><span style="color:#A44185;">v2</span><span style="color:#002339;">   </span><span style="color:#357B42;font-style:italic;"># 要么一起成功要么一起失败</span></span>
<span class="line"><span style="color:#7EB233;">mgetnx</span><span style="color:#002339;"> </span><span style="color:#A44185;">k1</span><span style="color:#002339;"> </span><span style="color:#A44185;">k2</span><span style="color:#002339;">         </span><span style="color:#357B42;font-style:italic;"># 获得多个value</span></span>
<span class="line"><span style="color:#7EB233;">getset</span><span style="color:#002339;"> </span><span style="color:#A44185;">db</span><span style="color:#002339;"> </span><span style="color:#A44185;">redis</span><span style="color:#002339;">      </span><span style="color:#357B42;font-style:italic;"># 先get再set</span></span></code></pre></div><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h3><p>string 是 redis 最基本的数据类型。一个 key 对应一个 value string 是二进制安全的。也就是说 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象 string 类型是 redis 最基本的数据类型，string 类型的值最大能存储 512 MB **理解：**string 就像是 java 中的 map 一样，一个 key 对应一个 value <img src="`+o+'" alt=""></p><p><img src="'+e+`" alt=""></p><p>NX：当数据库中key不存在时，可以将key-value添加数据库（可用作锁） XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥 EX：key的超时秒数 PX：key的超时毫秒数，与EX互斥</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 添加键值对</span></span>
<span class="line"><span style="color:#1AB394;">set</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 查询对应键值</span></span>
<span class="line"><span style="color:#7EB233;">get</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将给定的&lt;value&gt; 追加到原值的末尾 </span></span>
<span class="line"><span style="color:#7EB233;">append</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 获得值的长度 </span></span>
<span class="line"><span style="color:#7EB233;">strlen</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 只有在 key 不存在时设置 key 的值，作为锁使用，后续会介绍</span></span>
<span class="line"><span style="color:#7EB233;">setnx</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将 key 中储存的数字值增1</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 只能对数字值操作，如果为空，新增值为1</span></span>
<span class="line"><span style="color:#7EB233;">incr</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将 key 中储存的数字值减1</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 只能对数字值操作，如果为空，新增值为-1</span></span>
<span class="line"><span style="color:#7EB233;">decr</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将 key 中储存的数字值增减。自定义步长。</span></span>
<span class="line"><span style="color:#7EB233;">incrby</span><span style="color:#002339;"> </span><span style="color:#A44185;">/</span><span style="color:#002339;"> </span><span style="color:#A44185;">decrby</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">步</span><span style="color:#002339;">长</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 同时设置一个或多个 key-value对  </span></span>
<span class="line"><span style="color:#7EB233;">mset</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">2&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#7B30D0;">2&gt;</span><span style="color:#002339;">  </span><span style="color:#A44185;">.....</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 同时获取一个或多个 value  </span></span>
<span class="line"><span style="color:#7EB233;">mget</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">2&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#7B30D0;">3&gt;</span><span style="color:#002339;"> </span><span style="color:#A44185;">.....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</span></span>
<span class="line"><span style="color:#7EB233;">msetnx</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">2&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#7B30D0;">2&gt;</span><span style="color:#002339;">  </span><span style="color:#A44185;">.....</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">数据结构</p><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配</p></div><p><img src="`+t+'" alt=""></p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="hash" tabindex="-1">Hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;Hash&quot;">​</a></h3><p>hash 是一个键值对集合，是一个string类型的field和value的映射表，hash特别适合用于存储对象类似Java里面的 Map&lt;String,Object&gt;</p><p><img src="'+c+'" alt=""><img src="'+r+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 给&lt;key&gt;集合中的 &lt;field&gt;键赋值&lt;value&gt;</span></span>
<span class="line"><span style="color:#7EB233;">hset</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">fiel</span><span style="color:#002339;">d&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 从&lt;key1&gt;集合&lt;field&gt;取出 value </span></span>
<span class="line"><span style="color:#7EB233;">hget</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">fiel</span><span style="color:#002339;">d</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 批量设置hash的值</span></span>
<span class="line"><span style="color:#7EB233;">hmset</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">field</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">field</span><span style="color:#002339;">2&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#7B30D0;">2&gt;</span><span style="color:#A44185;">...</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 查看哈希表 key 中，给定域 field 是否存在</span></span>
<span class="line"><span style="color:#7EB233;">hexists&lt;key1&gt;&lt;field&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 列出该hash集合的所有field</span></span>
<span class="line"><span style="color:#7EB233;">hkeys</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 列出该hash集合的所有value</span></span>
<span class="line"><span style="color:#7EB233;">hvals</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 为哈希表 key 中的域 field 的值加上增量 1   -1</span></span>
<span class="line"><span style="color:#7EB233;">hincrby</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">fiel</span><span style="color:#002339;">d&gt;&lt;</span><span style="color:#A44185;">incremen</span><span style="color:#002339;">t</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</span></span>
<span class="line"><span style="color:#7EB233;">hsetnx</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">fiel</span><span style="color:#002339;">d&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span></code></pre></div><h3 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h3><p>单键多值</p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 从左边/右边插入一个或多个值</span></span>
<span class="line"><span style="color:#7EB233;">lpush/rpush</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">2&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#7B30D0;">3&gt;</span><span style="color:#002339;"> </span><span style="color:#A44185;">....</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 从左边/右边吐出一个值。值在键在，值光键亡</span></span>
<span class="line"><span style="color:#7EB233;">lpop/rpop</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 列表右边吐出一个值，插到&lt;key2&gt;列表左边</span></span>
<span class="line"><span style="color:#7EB233;">rpoplpush</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#7B30D0;">2&gt;</span><span style="color:#A44185;">从</span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#7B30D0;">1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 左边插入类似于头插法，右边插入类似于尾插法</span></span>
<span class="line"><span style="color:#7EB233;">lrange</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">star</span><span style="color:#002339;">t&gt;&lt;</span><span style="color:#A44185;">sto</span><span style="color:#002339;">p</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 按照索引下标获得元素(从左到右) 0 左边第一个，-1右边第一个，（0-1表示获取所有）</span></span>
<span class="line"><span style="color:#7EB233;">lrange</span><span style="color:#002339;"> </span><span style="color:#A44185;">mylist</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span><span style="color:#002339;"> </span><span style="color:#174781;">-1</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 按照索引下标获得元素(从左到右)  </span></span>
<span class="line"><span style="color:#7EB233;">lindex</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">inde</span><span style="color:#002339;">x</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 获得列表长度 </span></span>
<span class="line"><span style="color:#7EB233;">llen</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 在&lt;value&gt;的后面插入&lt;newvalue&gt;插入值</span></span>
<span class="line"><span style="color:#7EB233;">linsert</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;">  </span><span style="color:#A44185;">before</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e&gt;&lt;</span><span style="color:#A44185;">newvalu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 从左边删除n个value(从左到右)</span></span>
<span class="line"><span style="color:#7EB233;">lrem</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;n&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将列表key下标为index的值替换成value</span></span>
<span class="line"><span style="color:#7EB233;">lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</span></span></code></pre></div><p>我们可以看出 list 就是一个简单的字符串集合，和 Java 中的 list 相差不大，区别就是这里的 list 存放的是字符串。list 内的元素是可重复的。</p><div class="tip custom-block"><p class="custom-block-title">数据结构</p><p>List的数据结构为快速链表quickList。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。 它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist</p></div><p><img src="`+y+'" alt=""></p><h3 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h3><p>redis 的 set 是字符串类型的无序集合。集合是通过哈希表实现的，因此添加、删除、查找的复杂度都是 0（1）</p><p><img src="'+s+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin has-diff"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</span></span>
<span class="line"><span style="color:#7EB233;">sadd</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#7B30D0;">2&gt;</span><span style="color:#002339;"> </span><span style="color:#A44185;">.....</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 取出该集合的所有值</span></span>
<span class="line"><span style="color:#7EB233;">smembers</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 判断集合&lt;key&gt;是否为含有该&lt;value&gt;值，有1，没有0</span></span>
<span class="line"><span style="color:#7EB233;">sismember</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 返回该集合的元素个数</span></span>
<span class="line"><span style="color:#7EB233;">scard&lt;key&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 删除集合中的某个元素</span></span>
<span class="line"><span style="color:#7EB233;">srem</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#7B30D0;">2&gt;</span><span style="color:#002339;"> </span><span style="color:#A44185;">....</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 随机从该集合中吐出一个值</span></span>
<span class="line"><span style="color:#7EB233;">spop</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 随机从该集合中取出n个值。不会从集合中删除</span></span>
<span class="line"><span style="color:#7EB233;">srandmember</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;n</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 把集合中一个值从一个集合移动到另一个集合</span></span>
<span class="line"><span style="color:#7EB233;">smove</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">sourc</span><span style="color:#002339;">e&gt;&lt;</span><span style="color:#A44185;">destinatio</span><span style="color:#002339;">n</span><span style="color:#7B30D0;">&gt;</span><span style="color:#A44185;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 返回两个集合的交集元素</span></span>
<span class="line"><span style="color:#7EB233;">sinter</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#7B30D0;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 返回两个集合的并集元素</span></span>
<span class="line"><span style="color:#7EB233;">sunion</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#7B30D0;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 返回两个集合的差集元素(key1中的，不包含key2中的)</span></span>
<span class="line"><span style="color:#7EB233;">sdiff</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">key</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">key</span><span style="color:#7B30D0;">2&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">数据结构</p><p>数据结构是dict字典，字典是用哈希表实现的，Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值</p><p>redis 的 set 与 java 中的 set 的区别在于 redis 的 set 是一个 key 对应着 多个字符串类型的 value，也是一个字符串类型的集合 但是和 redis 的 list 不同的是 set 中的字符串集合元素不能重复，但是 list 可以</p></div><h3 id="zset" tabindex="-1">ZSet <a class="header-anchor" href="#zset" aria-label="Permalink to &quot;ZSet&quot;">​</a></h3><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合</p><p>不同之处是有序集合的每个成员都关联了一个评分（score），这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员，集合的成员是唯一的，但是评分可以是重复了</p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表</p><p><img src="`+s+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 将一个或多个 member 元素及其 score 值加入到有序集 key 当中</span></span>
<span class="line"><span style="color:#7EB233;">zadd</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">score</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#002339;">1&gt;&lt;</span><span style="color:#A44185;">score</span><span style="color:#002339;">2&gt;&lt;</span><span style="color:#A44185;">value</span><span style="color:#7B30D0;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 带WITHSCORES，可以让分数一起和值返回到结果集</span></span>
<span class="line"><span style="color:#7EB233;">zrange</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">star</span><span style="color:#002339;">t&gt;&lt;</span><span style="color:#A44185;">sto</span><span style="color:#002339;">p</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;">  [WITHSCORES]   </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 有序集成员按 score 值递增(从小到大)次序排列 </span></span>
<span class="line"><span style="color:#7EB233;">zrangebyscore</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#A44185;">minmax</span><span style="color:#002339;"> [withscores] [limit offset count]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 同上，改为从大到小排列</span></span>
<span class="line"><span style="color:#7EB233;">zrevrangebyscore</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> </span><span style="color:#A44185;">maxmin</span><span style="color:#002339;"> [withscores] [limit offset count]               </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 为元素的score加上增量</span></span>
<span class="line"><span style="color:#7EB233;">zincrby</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">incremen</span><span style="color:#002339;">t&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 删除该集合下，指定值的元素 </span></span>
<span class="line"><span style="color:#7EB233;">zrem</span><span style="color:#002339;">  </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 统计该集合，分数区间内的元素个数</span></span>
<span class="line"><span style="color:#7EB233;">zcount</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">mi</span><span style="color:#002339;">n&gt;&lt;</span><span style="color:#A44185;">ma</span><span style="color:#002339;">x</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;"> </span><span style="color:#357B42;font-style:italic;"># 返回该值在集合中的排名，从0开始</span></span>
<span class="line"><span style="color:#7EB233;">zrank</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y&gt;&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span></code></pre></div><h3 id="bitmaps" tabindex="-1">Bitmaps <a class="header-anchor" href="#bitmaps" aria-label="Permalink to &quot;Bitmaps&quot;">​</a></h3><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成，共24位存储空间。</p><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作： （1）Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。 （2）Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。 <img src="`+i+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 设置Bitmaps中某个偏移量的值（0或1）</span></span>
<span class="line"><span style="color:#7EB233;">setbit</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">offse</span><span style="color:#002339;">t</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">valu</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span></span></code></pre></div><p>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>设置键的第offset个位的值（从0算起），假设现在有20个用户，userid=1，6，11，15，19的用户对网站进行了访问，那么当前Bitmaps初始化结果如图</p><p><img src="`+B+`" alt=""></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>很多应用的用户id以一个指定数字（例如10000） 开头，直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费，通常的做法是每次做setbit操作时将用户id减去这个指定数字。 在第一次初始化Bitmaps时，假如偏移量非常大，那么整个初始化过程执行会比较慢，可能会造成Redis的阻塞</p></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 获取Bitmaps中某个偏移量的值</span></span>
<span class="line"><span style="color:#7EB233;">getbit</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">offse</span><span style="color:#002339;">t</span><span style="color:#7B30D0;">&gt;</span></span></code></pre></div><p>可以用来获取id=8的用户是否当天访问过</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7EB233;">bitcount</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> [start </span><span style="color:#A44185;">end]</span></span></code></pre></div><p>bitcount，统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7EB233;">bitop</span><span style="color:#002339;">  </span><span style="color:#A44185;">and</span><span style="color:#002339;">(</span><span style="color:#7EB233;">or/not/xor</span><span style="color:#002339;">) </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">destke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> [key…]</span></span></code></pre></div><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><h3 id="hyperloglog" tabindex="-1">HyperLogLog <a class="header-anchor" href="#hyperloglog" aria-label="Permalink to &quot;HyperLogLog&quot;">​</a></h3><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。 但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。 解决基数问题有很多种方案：</p><ol><li>数据存储在MySQL表中，使用distinct count计算不重复个数</li><li>使用Redis提供的hash、set、bitmaps等数据结构来处理</li></ol><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。 能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素</p><p>什么是基数? 比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 添加指定元素到 HyperLogLog 中</span></span>
<span class="line"><span style="color:#7EB233;">pfadd</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">elemen</span><span style="color:#002339;">t</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> [element </span><span style="color:#A44185;">...]</span><span style="color:#002339;">   </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将一个或多个HLL合并后的结果存储在另一个HLL中</span></span>
<span class="line"><span style="color:#7EB233;">pfmerge</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">destke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">sourceke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> [sourcekey </span><span style="color:#A44185;">...]</span></span></code></pre></div><h3 id="geospatial" tabindex="-1">Geospatial <a class="header-anchor" href="#geospatial" aria-label="Permalink to &quot;Geospatial&quot;">​</a></h3><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 添加地理位置（经度，纬度，名称）</span></span>
<span class="line"><span style="color:#7EB233;">geoadd</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">longitud</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">latitud</span><span style="color:#002339;">e</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">membe</span><span style="color:#002339;">r</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> [longitude </span><span style="color:#A44185;">latitude</span><span style="color:#002339;"> </span><span style="color:#A44185;">member...]</span></span></code></pre></div><p><img src="`+d+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 获得指定地区的坐标值</span></span>
<span class="line"><span style="color:#7EB233;">geopos</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">ke</span><span style="color:#002339;">y</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">membe</span><span style="color:#002339;">r</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> [member...]</span></span></code></pre></div><p><img src="`+u+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 获取两个位置之间的直线距离</span></span>
<span class="line"><span style="color:#7EB233;">geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt;</span><span style="color:#002339;">  [m</span><span style="color:#7B30D0;">|</span><span style="color:#7EB233;">km</span><span style="color:#7B30D0;">|</span><span style="color:#7EB233;">ft</span><span style="color:#7B30D0;">|</span><span style="color:#7EB233;">mi</span><span style="color:#002339;"> </span><span style="color:#A44185;">]</span></span></code></pre></div><p><img src="`+g+`" alt=""></p><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程</span></span>
<span class="line"><span style="color:#7EB233;">daemonize</span><span style="color:#002339;"> </span><span style="color:#A44185;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 当Redis以守护进程方式运行时</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Redis默认会把pid写入/var/run/redis.pid文件，可以通过 pidfile 指定</span></span>
<span class="line"><span style="color:#7EB233;">pidfile</span><span style="color:#002339;"> </span><span style="color:#A44185;">/var/run/redis.pid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定Redis监听端口，默认端口为6379</span></span>
<span class="line"><span style="color:#7EB233;">port</span><span style="color:#002339;"> </span><span style="color:#174781;">6379</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 绑定的主机地址</span></span>
<span class="line"><span style="color:#7EB233;">bind</span><span style="color:#002339;"> </span><span style="color:#174781;">127.0</span><span style="color:#A44185;">.0.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span>
<span class="line"><span style="color:#7EB233;">timeout</span><span style="color:#002339;"> </span><span style="color:#174781;">300</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span></span>
<span class="line"><span style="color:#7EB233;">loglevel</span><span style="color:#002339;"> </span><span style="color:#A44185;">verbose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</span></span>
<span class="line"><span style="color:#7EB233;">logfile</span><span style="color:#002339;"> </span><span style="color:#A44185;">stdout</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</span></span>
<span class="line"><span style="color:#7EB233;">databases</span><span style="color:#002339;"> </span><span style="color:#174781;">16</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">#指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span>
<span class="line"><span style="color:#7EB233;">save</span><span style="color:#002339;"> </span><span style="color:#A44185;">seconds</span><span style="color:#002339;"> </span><span style="color:#A44185;">changes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 默认配置文件中提供了三个条件：</span></span>
<span class="line"><span style="color:#7EB233;">Redis</span></span>
<span class="line"><span style="color:#7EB233;">save</span><span style="color:#002339;"> </span><span style="color:#174781;">900</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span></span>
<span class="line"><span style="color:#7EB233;">save</span><span style="color:#002339;"> </span><span style="color:#174781;">300</span><span style="color:#002339;"> </span><span style="color:#174781;">10</span></span>
<span class="line"><span style="color:#7EB233;">save</span><span style="color:#002339;"> </span><span style="color:#174781;">60</span><span style="color:#002339;"> </span><span style="color:#174781;">10000</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定存储至本地数据库时是否压缩数据</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span></span>
<span class="line"><span style="color:#7EB233;">rdbcompression</span><span style="color:#002339;"> </span><span style="color:#A44185;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定本地数据库文件名，默认值为dump.rdb</span></span>
<span class="line"><span style="color:#7EB233;">dbfilename</span><span style="color:#002339;"> </span><span style="color:#A44185;">dump.rdb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定本地数据库存放目录</span></span>
<span class="line"><span style="color:#7EB233;">dir</span><span style="color:#002339;"> </span><span style="color:#A44185;">./</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置当本机为slav服务时，设置master服务的IP地址及端口</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 在Redis启动时，它会自动从master进行数据同步</span></span>
<span class="line"><span style="color:#7EB233;">slaveof</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">masteri</span><span style="color:#002339;">p</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">masterpor</span><span style="color:#002339;">t</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 当master服务设置了密码保护时，slav服务连接master的密码</span></span>
<span class="line"><span style="color:#7EB233;">masterauth</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">master-passwor</span><span style="color:#002339;">d</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置Redis连接密码，如果配置了连接密码</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span></span>
<span class="line"><span style="color:#7EB233;">requirepass</span><span style="color:#002339;"> </span><span style="color:#A44185;">foobared</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置同一时间最大客户端连接数，默认无限制</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 如果设置 maxclients 0，表示不作限制</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 当客户端连接数到达限制时</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Redis会关闭新的连接并向客户端返回 max number of clients reached 错误信息</span></span>
<span class="line"><span style="color:#7EB233;">maxclients</span><span style="color:#002339;"> </span><span style="color:#174781;">128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，仍然到达最大内存设置</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将无法再进行写入操作，但仍然可以进行读取操作</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span>
<span class="line"><span style="color:#7EB233;">maxmemory</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">byte</span><span style="color:#002339;">s</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 如果不开启，可能会在断电时导致一段时间内的数据丢失</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 因为 redis本身同步数据文件是按上面save条件来同步的 </span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 所以有的数据会在一段时间内只存在于内存中 默认为 no</span></span>
<span class="line"><span style="color:#7EB233;">appendonly</span><span style="color:#002339;"> </span><span style="color:#A44185;">no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定更新日志文件名，默认为appendonly.aof</span></span>
<span class="line"><span style="color:#7EB233;">appendfilename</span><span style="color:#002339;"> </span><span style="color:#A44185;">appendonly.aof</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定更新日志条件，共有3个可选值：</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># no：表示等操作系统进行数据缓存同步到磁盘（快）</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># everysec：表示每秒同步一次（折衷，默认值）</span></span>
<span class="line"><span style="color:#7EB233;">appendfsync</span><span style="color:#002339;"> </span><span style="color:#A44185;">everysec</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定是否启用虚拟内存机制，默认值为no</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</span></span>
<span class="line"><span style="color:#7EB233;">vm-enabled</span><span style="color:#002339;"> </span><span style="color:#A44185;">no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span></span>
<span class="line"><span style="color:#7EB233;">vm-swap-file</span><span style="color:#002339;"> </span><span style="color:#A44185;">/tmp/redis.swap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 所有索引数据都是内存存储的(Redis的索引数据 就是keys)</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘 默认值为 0</span></span>
<span class="line"><span style="color:#7EB233;">vm-max-memory</span><span style="color:#002339;"> </span><span style="color:#174781;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Redis swap文件分成了很多的page，一个对象可以保存在多个page上面</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 作者建议如果存储很多小对象，page大小最好设置为32或者64bytes</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 如果存储很大大对象，则可以使用更大的page，如果不确定，就使用默认值</span></span>
<span class="line"><span style="color:#7EB233;">vm-page-size</span><span style="color:#002339;"> </span><span style="color:#174781;">32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 在磁盘上每8个pages将消耗1byte的内存</span></span>
<span class="line"><span style="color:#7EB233;">vm-pages</span><span style="color:#002339;"> </span><span style="color:#174781;">134217728</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置访问swap文件的线程数，最好不要超过机器的核数</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 如果设置为 0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟</span></span>
<span class="line"><span style="color:#7EB233;">vm-max-threads</span><span style="color:#002339;"> </span><span style="color:#174781;">4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span></span>
<span class="line"><span style="color:#7EB233;">glueoutputbuf</span><span style="color:#002339;"> </span><span style="color:#A44185;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span></span>
<span class="line"><span style="color:#1AB394;">hash</span><span style="color:#002339;">-max-zipmap-entries </span><span style="color:#174781;">64</span></span>
<span class="line"><span style="color:#1AB394;">hash</span><span style="color:#002339;">-max-zipmap-value </span><span style="color:#174781;">512</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</span></span>
<span class="line"><span style="color:#7EB233;">activerehashing</span><span style="color:#002339;"> </span><span style="color:#A44185;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 而同时各个实例又拥有自己的特定配置文件</span></span>
<span class="line"><span style="color:#7EB233;">include</span><span style="color:#002339;"> </span><span style="color:#A44185;">/path/to/local.conf</span></span></code></pre></div><h2 id="事务-锁机制实现" tabindex="-1">事务-锁机制实现 <a class="header-anchor" href="#事务-锁机制实现" aria-label="Permalink to &quot;事务-锁机制实现&quot;">​</a></h2><p>redis 事务一次可以执行多条命令，服务器在执行命令期间，不会去执行其他客户端的命令请求。事务中的多条命令被一次性发送给服务器，而不是一条一条地发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p><p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。批量操作在发送 EXEC 命令前被放入队列缓存。收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余命令依然被执行。也就是说 Redis 事务不保证原子性。在事务执行过程中，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li>开始事务</li><li>命令入队</li><li>执行事务</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 开启事务</span></span>
<span class="line"><span style="color:#7EB233;">127.0.0.1:6379&gt;multi</span></span>
<span class="line"><span style="color:#7EB233;">OK</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 命令入队</span></span>
<span class="line"><span style="color:#7EB233;">127.0.0.1:6379&gt;set</span><span style="color:#002339;"> </span><span style="color:#A44185;">k1</span><span style="color:#002339;"> </span><span style="color:#A44185;">v1</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 执行事务</span></span>
<span class="line"><span style="color:#7EB233;">127.0.0.1:6379&gt;exec</span></span>
<span class="line"><span style="color:#7EB233;">1</span><span style="color:#002339;">) OK</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 放弃事务</span></span>
<span class="line"><span style="color:#7EB233;">127.0.0.1:6379&gt;discard</span></span></code></pre></div><h3 id="multi、exec、discard" tabindex="-1">Multi、Exec、discard <a class="header-anchor" href="#multi、exec、discard" aria-label="Permalink to &quot;Multi、Exec、discard&quot;">​</a></h3><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行</p><p>组队的过程中可以通过discard来放弃组队</p><p><img src="`+f+'" alt=""></p><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消</p><p><img src="'+D+'" alt=""></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚</p><p><img src="'+h+'" alt=""></p><h3 id="并发引起的事务问题" tabindex="-1">并发引起的事务问题 <a class="header-anchor" href="#并发引起的事务问题" aria-label="Permalink to &quot;并发引起的事务问题&quot;">​</a></h3><p>事务保证了发送到 Redis 的指令原子执行，这在只有单个客户端连接的情况下不会有任何问题。但是，当多个客户端同时对同一个键进行这样的操作时，就会产生竞争条件。 如果客户端 A 和 B 都读取了键原来的值，比如 10 ，那么两个客户端都会将键的值设为 11 ，但正确的结果应该是 12 才对。 使用锁机制可以解决这样的问题，锁又包括悲观锁和乐观锁</p><h4 id="悲观锁" tabindex="-1">悲观锁 <a class="header-anchor" href="#悲观锁" aria-label="Permalink to &quot;悲观锁&quot;">​</a></h4><p>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</p><h4 id="乐观锁" tabindex="-1">乐观锁 <a class="header-anchor" href="#乐观锁" aria-label="Permalink to &quot;乐观锁&quot;">​</a></h4><p>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的</p><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7EB233;">WATCH</span><span style="color:#002339;"> </span><span style="color:#A44185;">key</span><span style="color:#002339;"> [key </span><span style="color:#A44185;">...]</span></span></code></pre></div><h3 id="redis事务三特性" tabindex="-1">Redis事务三特性 <a class="header-anchor" href="#redis事务三特性" aria-label="Permalink to &quot;Redis事务三特性&quot;">​</a></h3><ul><li>单独的隔离操作： 事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>没有隔离级别的概念： 队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li><li>不保证原子性： 事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul><h2 id="redis持久化" tabindex="-1">Redis持久化 <a class="header-anchor" href="#redis持久化" aria-label="Permalink to &quot;Redis持久化&quot;">​</a></h2><h3 id="rdb-redis-database" tabindex="-1">RDB Redis DataBase <a class="header-anchor" href="#rdb-redis-database" aria-label="Permalink to &quot;RDB Redis DataBase&quot;">​</a></h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里；</p><p>RDB保存的是dump.rdb文件</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失；</p><p>fork：复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程；</p><p><img src="'+A+`" alt=""></p><p>dump.rdb文件</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7EB233;">save</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合；</span></span>
<span class="line"><span style="color:#7EB233;">save</span><span style="color:#002339;"> </span><span style="color:#174781;">900</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span><span style="color:#002339;"> </span><span style="color:#357B42;font-style:italic;"># 900秒（15分钟）内有1个更改</span></span>
<span class="line"><span style="color:#7EB233;">save</span><span style="color:#002339;"> </span><span style="color:#174781;">300</span><span style="color:#002339;"> </span><span style="color:#174781;">10</span><span style="color:#002339;"> </span><span style="color:#357B42;font-style:italic;"># 300秒（5分钟）内有10个更改</span></span>
<span class="line"><span style="color:#7EB233;">save</span><span style="color:#002339;"> </span><span style="color:#174781;">60</span><span style="color:#002339;"> </span><span style="color:#174781;">10000</span><span style="color:#002339;"> </span><span style="color:#357B42;font-style:italic;"># 60秒（1分钟）内有10000个更改</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 后台存储错误停止写</span></span>
<span class="line"><span style="color:#7EB233;">stop-writes-on-bgsave-error</span><span style="color:#002339;"> </span><span style="color:#A44185;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定存储至本地数据库时是否压缩数据，默认为yes</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span></span>
<span class="line"><span style="color:#7EB233;">rdbcompression</span><span style="color:#002339;"> </span><span style="color:#A44185;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 在存储快照后，还可以让redis使用CRC64算法来进行数据校验</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</span></span>
<span class="line"><span style="color:#7EB233;">rdbchecksum</span><span style="color:#002339;"> </span><span style="color:#A44185;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定本地数据库文件名，默认值为dump.rdb</span></span>
<span class="line"><span style="color:#7EB233;">dbfilename</span><span style="color:#002339;"> </span><span style="color:#A44185;">dump.rdb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定本地数据库存放目录（rdb、aof文件也会写在这个目录）</span></span>
<span class="line"><span style="color:#7EB233;">dir</span><span style="color:#002339;"> </span><span style="color:#A44185;">./</span></span></code></pre></div><h4 id="如何触发rdb快照" tabindex="-1">如何触发RDB快照 <a class="header-anchor" href="#如何触发rdb快照" aria-label="Permalink to &quot;如何触发RDB快照&quot;">​</a></h4><ul><li>配置文件中默认的快照配置（冷拷贝后重新使用：可以cp dump.rdb dump_new.rdb）</li><li>使用命令save或者bgsave</li></ul><p>save：save 时只管保存，其它不管，全部阻塞 bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过 lastsave 命令获取最后一次成功执行快照的时间</p><ul><li>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</li></ul><h4 id="如何恢复" tabindex="-1">如何恢复 <a class="header-anchor" href="#如何恢复" aria-label="Permalink to &quot;如何恢复&quot;">​</a></h4><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可，通过config get dir可获取目录</p><h4 id="如何停止" tabindex="-1">如何停止 <a class="header-anchor" href="#如何停止" aria-label="Permalink to &quot;如何停止&quot;">​</a></h4><p>动态所有停止RDB保存规则的方法：redis-cli config set save &quot;&quot;</p><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ol><li>适合大规模的数据回复</li><li>对数据的完整性不高</li></ol><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ol><li>需要一定的时间间隔去操作，在一定间隔时间做一次备份，所以如果redis意外宕掉的话，就会丢失最后一次快照后的所有修改</li><li>fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li></ol><h3 id="aof-append-only-file" tabindex="-1">AOF（Append Only File） <a class="header-anchor" href="#aof-append-only-file" aria-label="Permalink to &quot;AOF（Append Only File）&quot;">​</a></h3><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作（AOF保存的是 appendonly.aof 文件）</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 如果不开启，可能会在断电时导致一段时间内的数据丢失</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 因为redis本身同步数据文件是按上面save条件来同步的</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 所以有的数据会在一段时间内只存在于内存中。默认为no</span></span>
<span class="line"><span style="color:#7EB233;">appendonly</span><span style="color:#002339;"> </span><span style="color:#A44185;">no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定更新日志文件名，默认为 appendonly.aof</span></span>
<span class="line"><span style="color:#7EB233;">appendfilename</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;appendonly.aof&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定更新日志条件，共有3个可选值：</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># no：表示等操作系统进行数据缓存同步到磁盘（快）</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># everysec：表示每秒同步一次（折衷，默认值）</span></span>
<span class="line"><span style="color:#7EB233;">appendfsync</span><span style="color:#002339;"> </span><span style="color:#A44185;">everysec</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性</span></span>
<span class="line"><span style="color:#7EB233;">no-appendfsync-on-rewrite</span><span style="color:#002339;"> </span><span style="color:#A44185;">no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 重写指定百分比，为0会禁用AOF自动重写特性</span></span>
<span class="line"><span style="color:#7EB233;">auto-aof-rewrite-percentage</span><span style="color:#002339;"> </span><span style="color:#174781;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置重写的基准值</span></span>
<span class="line"><span style="color:#7EB233;">auto-aof-rewrite-min-size</span><span style="color:#002339;"> </span><span style="color:#174781;">64</span><span style="color:#A44185;">mb</span></span></code></pre></div><h4 id="aof启动-修复-恢复" tabindex="-1">AOF启动/修复/恢复 <a class="header-anchor" href="#aof启动-修复-恢复" aria-label="Permalink to &quot;AOF启动/修复/恢复&quot;">​</a></h4><ul><li>正常恢复</li></ul><p>启动：修改默认的appendonly no，改为yes <br> 将有数据的aof文件复制一份保存到对应目录(目录通过config get dir命令获取) <br> 恢复：重启redis然后重新加载</p><ul><li>异常恢复</li></ul><p>启动：修改默认的appendonly no，改为yes <br> 备份被破坏的aof文件 <br> 修复：使用redis-check-aof --fix命令进行修复 <br> 恢复：重启redis然后重新加载</p><h4 id="rewrite" tabindex="-1">rewrite <a class="header-anchor" href="#rewrite" aria-label="Permalink to &quot;rewrite&quot;">​</a></h4><ul><li>rewrite介绍</li></ul><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定 的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命bgrewriteaof</p><ul><li>重写原理</li></ul><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程 的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中 的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似</p><ul><li>触发机制</li></ul><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时 触发；</p><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>每修改同步：appendfsync always 同步持久化，每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好</li><li>每秒同步：appendfsync everysec 异步操作，每秒记录，如果一秒内宕机，有数据丢失</li><li>不同步：appendfsync no 从不同步</li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb</li><li>aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同</li></ul><h2 id="发布和订阅" tabindex="-1">发布和订阅 <a class="header-anchor" href="#发布和订阅" aria-label="Permalink to &quot;发布和订阅&quot;">​</a></h2><p>一般不用 Redis 做消息发布订阅</p><p><img src="`+k+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 首先通过客户端1订阅频道1</span></span>
<span class="line"><span style="color:#7EB233;">127.0.0.1:6379&gt;</span><span style="color:#002339;"> </span><span style="color:#A44185;">subscribe</span><span style="color:#002339;"> </span><span style="color:#A44185;">channel</span></span>
<span class="line"><span style="color:#7EB233;">Reading</span><span style="color:#002339;"> </span><span style="color:#A44185;">messages...</span><span style="color:#002339;"> (press </span><span style="color:#A44185;">Ctrl-C</span><span style="color:#002339;"> </span><span style="color:#A44185;">to</span><span style="color:#002339;"> </span><span style="color:#A44185;">quit</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#7EB233;">1</span><span style="color:#002339;">) </span><span style="color:#A44185;">&quot;subscribe&quot;</span></span>
<span class="line"><span style="color:#7EB233;">2</span><span style="color:#002339;">) </span><span style="color:#A44185;">&quot;channel&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 向频道内发送信息hello</span></span>
<span class="line"><span style="color:#7EB233;">127.0.0.1:6379&gt;</span><span style="color:#002339;"> </span><span style="color:#A44185;">publish</span><span style="color:#002339;"> </span><span style="color:#A44185;">channel</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#002339;">(</span><span style="color:#7EB233;">integer</span><span style="color:#002339;">) 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 订阅了频道1的客户端收到了hello信息</span></span>
<span class="line"><span style="color:#7EB233;">1</span><span style="color:#002339;">) </span><span style="color:#A44185;">&quot;subscribe&quot;</span></span>
<span class="line"><span style="color:#7EB233;">2</span><span style="color:#002339;">) </span><span style="color:#A44185;">&quot;channel&quot;</span></span>
<span class="line"><span style="color:#7EB233;">3</span><span style="color:#002339;">) (</span><span style="color:#7EB233;">integer</span><span style="color:#002339;">) 1</span></span>
<span class="line"><span style="color:#7EB233;">4</span><span style="color:#002339;">) </span><span style="color:#A44185;">&quot;message&quot;</span></span>
<span class="line"><span style="color:#7EB233;">5</span><span style="color:#002339;">) </span><span style="color:#A44185;">&quot;channel&quot;</span></span>
<span class="line"><span style="color:#7EB233;">6</span><span style="color:#002339;">) </span><span style="color:#A44185;">&quot;hello&quot;</span></span></code></pre></div><h2 id="主从复制" tabindex="-1">主从复制 <a class="header-anchor" href="#主从复制" aria-label="Permalink to &quot;主从复制&quot;">​</a></h2><p>一台服务器的数据复制到其他服务器，前者为主节点后者为从节点，数据的复制是单项的，Master为写Slave为读</p><p>作用</p><ul><li>数据冗余：主从复制实现了数据的热备份，是持久化的一种数据冗余方式</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务器的冗余</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点来写，从节点来读</li><li>高可用</li></ul><p>环境： 只配置从库，不用配置主库</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 修改主节点日志跟rdb文件</span></span>
<span class="line"><span style="color:#7EB233;">logfile</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;6379.log&quot;</span></span>
<span class="line"><span style="color:#7EB233;">dbfilename</span><span style="color:#002339;"> </span><span style="color:#A44185;">dump6379.rdb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 修改从节点</span></span>
<span class="line"><span style="color:#7EB233;">port</span><span style="color:#002339;"> </span><span style="color:#174781;">6380</span></span>
<span class="line"><span style="color:#7EB233;">pidfile</span><span style="color:#002339;"> </span><span style="color:#A44185;">/var/run/reds_6380.pid</span></span>
<span class="line"><span style="color:#7EB233;">logfile</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;6380.log&quot;</span></span>
<span class="line"><span style="color:#7EB233;">dbfilename</span><span style="color:#002339;"> </span><span style="color:#A44185;">dump6380.rdb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置从节点所属的主节点</span></span>
<span class="line"><span style="color:#7EB233;">slaveof</span><span style="color:#002339;"> </span><span style="color:#174781;">127.0</span><span style="color:#A44185;">.0.1</span><span style="color:#002339;"> </span><span style="color:#174781;">6379</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 查看主节点信息</span></span>
<span class="line"><span style="color:#7EB233;">127.0.0.1:6379&gt;</span><span style="color:#002339;"> </span><span style="color:#A44185;">info</span><span style="color:#002339;"> </span><span style="color:#A44185;">replication</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># Replication</span></span>
<span class="line"><span style="color:#7EB233;">role:master</span></span>
<span class="line"><span style="color:#7EB233;">connected_slaves:1</span><span style="color:#002339;"> </span><span style="color:#357B42;font-style:italic;"># 从节点数量为 1</span></span>
<span class="line"><span style="color:#7EB233;">master_repl_offset:0</span></span>
<span class="line"><span style="color:#7EB233;">repl_backlog_active:0</span></span>
<span class="line"><span style="color:#7EB233;">repl_backlog_size:1048576</span></span>
<span class="line"><span style="color:#7EB233;">repl_backlog_first_byte_offset:0</span></span>
<span class="line"><span style="color:#7EB233;">repl_backlog_histlen:0</span><span style="color:#002339;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 除了命令还可以修改配置文件</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 设置当本机为slav服务时，设置master服务的IP地址及端口</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 在Redis启动时，它会自动从master进行数据同步</span></span>
<span class="line"><span style="color:#7EB233;">slaveof</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">masteri</span><span style="color:#002339;">p</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">masterpor</span><span style="color:#002339;">t</span><span style="color:#7B30D0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 当master服务设置了密码保护时，slav服务连接master的密码</span></span>
<span class="line"><span style="color:#7EB233;">masterauth</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">&lt;</span><span style="color:#A44185;">master-passwor</span><span style="color:#002339;">d</span><span style="color:#7B30D0;">&gt;</span></span></code></pre></div><p>从节点启动成功后会发送一个sync同步命令 主节点收到后，启动后台的存盘进程，收集所有数据将整个数据文件发送给从节点</p><p>全量复制：从节点接受的到数据文件后，将 其加载到内存 增量复制：master继续将新的数据传给从节点</p><p>宕机后手动配置主机</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#7EB233;">slaveof</span><span style="color:#002339;"> </span><span style="color:#A44185;">no</span><span style="color:#002339;"> </span><span style="color:#A44185;">one</span><span style="color:#002339;"> </span><span style="color:#A44185;">使自己成为主节点</span></span></code></pre></div><h2 id="哨兵模式" tabindex="-1">哨兵模式 <a class="header-anchor" href="#哨兵模式" aria-label="Permalink to &quot;哨兵模式&quot;">​</a></h2><p><img src="`+m+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;"># 哨兵默认端口 26379</span></span>
<span class="line"><span style="color:#7EB233;">prot</span><span style="color:#002339;"> </span><span style="color:#174781;">26379</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 哨兵工作目录</span></span>
<span class="line"><span style="color:#7EB233;">dir</span><span style="color:#002339;"> </span><span style="color:#A44185;">/tmp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 配置哨兵  设置监控的主节点 配置多少个sentinel认为master主节点失联，那么进行选举</span></span>
<span class="line"><span style="color:#7EB233;">sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">monitor</span><span style="color:#002339;"> </span><span style="color:#A44185;">myredis</span><span style="color:#002339;"> </span><span style="color:#174781;">127.0</span><span style="color:#A44185;">.0.1</span><span style="color:#002339;"> </span><span style="color:#174781;">6379</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 连接密码 requirepass foobared</span></span>
<span class="line"><span style="color:#7EB233;">sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">auth-pass</span><span style="color:#002339;"> </span><span style="color:#A44185;">mymaster</span><span style="color:#002339;"> </span><span style="color:#174781;">123456</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 指定多少毫秒后 主节点没有响应，哨兵则认为节点下线，默认为30秒</span></span>
<span class="line"><span style="color:#7EB233;">sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">down-after-milliseconds</span><span style="color:#002339;"> </span><span style="color:#A44185;">mymaster</span><span style="color:#002339;"> </span><span style="color:#174781;">30000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 这个配置指定发生failover主备切换时最多可以有多少个从节点同时对新的主节点进行同步</span></span>
<span class="line"><span style="color:#7EB233;">这个数字越小，完成failover所需时间越长</span></span>
<span class="line"><span style="color:#7EB233;">但如果越大，就意味着越多的从节点因为reoliactioin而不可用</span></span>
<span class="line"><span style="color:#7EB233;">可以设置为1，保证每次只要一个从节点处于不能处理命令的状态</span></span>
<span class="line"><span style="color:#7EB233;">sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">parallel-syncs</span><span style="color:#002339;"> </span><span style="color:#A44185;">mymaster</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 故障转移的超时时间 默认三分钟</span></span>
<span class="line"><span style="color:#7EB233;">sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">failover-timeout</span><span style="color:#002339;"> </span><span style="color:#A44185;">mymaster</span><span style="color:#002339;"> </span><span style="color:#174781;">180000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 通知脚本 sentinel有任何警告发生都会执行这个脚本</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 脚本执行后返回 1，那么该脚本将会再次被执行，重复次数默认为20</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 执行返回 2，获取比2高的值则不重复执行，如果执行过程中终止，则返回值为1时的行为相同</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 脚本最大执行时间60秒，超过则会被SIGKILL信号终止，之后重新执行</span></span>
<span class="line"><span style="color:#7EB233;">sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">notification-script</span><span style="color:#002339;"> </span><span style="color:#A44185;">mymaster</span><span style="color:#002339;"> </span><span style="color:#A44185;">/var/redis/notify.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 客户端重新配置主节点参数脚本</span></span>
<span class="line"><span style="color:#7EB233;">sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">client-reconfig-script</span><span style="color:#002339;"> </span><span style="color:#A44185;">mymaster</span><span style="color:#002339;"> </span><span style="color:#A44185;">/var/redis/reconfig.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;"># 启动</span></span>
<span class="line"><span style="color:#7EB233;">redis-sentinel</span><span style="color:#002339;"> </span><span style="color:#A44185;">/mydata/redis/sentinel.conf</span></span></code></pre></div><h2 id="缓存生产问题概念" tabindex="-1">缓存生产问题概念 <a class="header-anchor" href="#缓存生产问题概念" aria-label="Permalink to &quot;缓存生产问题概念&quot;">​</a></h2><h3 id="缓存穿透" tabindex="-1">缓存穿透 <a class="header-anchor" href="#缓存穿透" aria-label="Permalink to &quot;缓存穿透&quot;">​</a></h3><p>指查询多个不存在的数据，由于缓存未命中，将查询数据库，但是数据库也无数据，将查询的null写入缓存，导致这个不存在的数据每次都要查询数据库，失去了缓存的意义，数据库压力过大，导致崩溃</p><p>解决：null结果缓存，加过期时间，布隆过滤器</p><h3 id="缓存雪崩" tabindex="-1">缓存雪崩 <a class="header-anchor" href="#缓存雪崩" aria-label="Permalink to &quot;缓存雪崩&quot;">​</a></h3><p>所有的key采用的相同的过期时间，导致缓存在某一时刻同时失效。请求全部去查询数据库，导致数据库瞬时压力过大最终崩溃</p><p>解决：加随机过期值</p><h3 id="缓存击穿" tabindex="-1">缓存击穿 <a class="header-anchor" href="#缓存击穿" aria-label="Permalink to &quot;缓存击穿&quot;">​</a></h3><p>对某一个设置了过期时间的key进行高并发访问，如果key在大量请求同时进来前正好失效那么都去查询数据库</p><p>解决：加锁</p><h3 id="分布式锁的基本原理" tabindex="-1">分布式锁的基本原理 <a class="header-anchor" href="#分布式锁的基本原理" aria-label="Permalink to &quot;分布式锁的基本原理&quot;">​</a></h3><p><img src="`+E+'" alt=""><img src="'+b+'" alt=""><img src="'+v+`" alt=""></p><h2 id="redisson" tabindex="-1">Redisson <a class="header-anchor" href="#redisson" aria-label="Permalink to &quot;Redisson&quot;">​</a></h2><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#357B42;font-style:italic;">&lt;!-- [https://mvnrepository.com/artifact/org.redisson/redisson](https://mvnrepository.com/artifact/org.redisson/redisson) --&gt;</span></span>
<span class="line"><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">dependency</span><span style="color:#002339;">&gt;</span></span>
<span class="line"><span style="color:#002339;">    &lt;</span><span style="color:#0444AC;">groupId</span><span style="color:#002339;">&gt;org.redisson&lt;/</span><span style="color:#0444AC;">groupId</span><span style="color:#002339;">&gt;</span></span>
<span class="line"><span style="color:#002339;">    &lt;</span><span style="color:#0444AC;">artifactId</span><span style="color:#002339;">&gt;redisson&lt;/</span><span style="color:#0444AC;">artifactId</span><span style="color:#002339;">&gt;</span></span>
<span class="line"><span style="color:#002339;">    &lt;</span><span style="color:#0444AC;">version</span><span style="color:#002339;">&gt;3.16.1&lt;/</span><span style="color:#0444AC;">version</span><span style="color:#002339;">&gt;</span></span>
<span class="line"><span style="color:#002339;">&lt;/</span><span style="color:#0444AC;">dependency</span><span style="color:#002339;">&gt;</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Configuration</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">RedissonConfig</span><span style="color:#002339;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 单节点模式</span></span>
<span class="line"><span style="color:#002339;">    @</span><span style="color:#0991B6;">Bean</span><span style="color:#002339;">(</span><span style="color:#174781;">destroyMethod</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;studown&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">RedissonClient</span><span style="color:#002339;"> </span><span style="color:#7EB233;">redisson</span><span style="color:#002339;">() </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">IOException</span><span style="color:#002339;">{</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">Config</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">Config</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">config</span><span style="color:#002339;">.</span><span style="color:#7EB233;">useSingleServer</span><span style="color:#002339;">()</span></span>
<span class="line"><span style="color:#002339;">                .</span><span style="color:#7EB233;">setAddress</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;42.193.102.182:6379&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">Redisson</span><span style="color:#002339;">.</span><span style="color:#7EB233;">create</span><span style="color:#002339;">(config);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki slack-ochin"><code><span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">RestController</span></span>
<span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">Api</span><span style="color:#002339;">(</span><span style="color:#174781;">tags</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;Redis测试&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">@</span><span style="color:#0991B6;">RequestMapping</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;redis/demo&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">redisDemo</span><span style="color:#002339;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">RedisUtils</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">RedissonClient</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#DA5221;">final</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ResourcesCategoryService</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">resourcesCategoryService</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#7EB233;">redisDemo</span><span style="color:#002339;">(</span><span style="color:#0991B6;">RedisUtils</span><span style="color:#002339;"> </span><span style="color:#B1108E;">redisUtils</span><span style="color:#002339;">, </span><span style="color:#0991B6;">RedissonClient</span><span style="color:#002339;"> </span><span style="color:#B1108E;">redisson</span><span style="color:#002339;">, </span><span style="color:#0991B6;">ResourcesCategoryService</span><span style="color:#002339;"> </span><span style="color:#B1108E;">resourcesCategoryService</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> redisUtils;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> redisson;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">resourcesCategoryService</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> resourcesCategoryService;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 查询</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    @</span><span style="color:#0991B6;">PostMapping</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;{key}&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">    @</span><span style="color:#0991B6;">ApiOperation</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;查询&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ReturnPlus</span><span style="color:#002339;"> </span><span style="color:#7EB233;">query</span><span style="color:#002339;">(@</span><span style="color:#0991B6;">PathVariable</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;key&quot;</span><span style="color:#002339;">) </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#B1108E;">key</span><span style="color:#002339;">){</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">//先查缓存</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">value</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (String) </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">StringUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isEmpty</span><span style="color:#002339;">(key)){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 缓存中没有去查数据库</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">Map</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">String</span><span style="color:#002339;">, </span><span style="color:#0991B6;">Object</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">params</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">HashMap</span><span style="color:#002339;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">resourcesCategoryService</span><span style="color:#002339;">.</span><span style="color:#7EB233;">list</span><span style="color:#002339;">(params);</span></span>
<span class="line"><span style="color:#002339;">            value </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">toJSONString</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(key,value);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ReturnPlus</span><span style="color:#002339;">.</span><span style="color:#7EB233;">ok</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">parseObject</span><span style="color:#002339;">(value,</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">TypeReference</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt;&gt;(){});</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ReturnPlus</span><span style="color:#002339;">.</span><span style="color:#7EB233;">ok</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 1 空结果返回</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 2 设置过期时间</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 3 加锁</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    @</span><span style="color:#0991B6;">PostMapping</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;/test/{key}&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">    @</span><span style="color:#0991B6;">ApiOperation</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;查询&quot;</span><span style="color:#002339;">)</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">ReturnPlus</span><span style="color:#002339;"> </span><span style="color:#7EB233;">demo</span><span style="color:#002339;">(@</span><span style="color:#0991B6;">PathVariable</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;key&quot;</span><span style="color:#002339;">)</span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#B1108E;">key</span><span style="color:#002339;">){</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 先查缓存</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">value</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (String) </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#2F86D2;">StringUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isEmpty</span><span style="color:#002339;">(value)){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">list</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ReturnPlus</span><span style="color:#002339;">.</span><span style="color:#7EB233;">ok</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 缓存中有</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">parseObject</span><span style="color:#002339;">(value,</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">TypeReference</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt;&gt;(){});</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ReturnPlus</span><span style="color:#002339;">.</span><span style="color:#7EB233;">ok</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// service  本地锁</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#7EB233;">list</span><span style="color:#002339;">(</span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#B1108E;">key</span><span style="color:#002339;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// service层业务加锁</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#DA5221;">synchronized</span><span style="color:#002339;"> (</span><span style="color:#000000;">this</span><span style="color:#002339;">){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">//先查缓存 双重检测</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">value</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (String) </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">StringUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isEmpty</span><span style="color:#002339;">(value)){</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 缓存不为空直接返回</span></span>
<span class="line"><span style="color:#002339;">          </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">parseObject</span><span style="color:#002339;">(value,</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">TypeReference</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt;&gt;(){});</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">System</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">out</span><span style="color:#002339;">.</span><span style="color:#7EB233;">println</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;========查询数据库=========&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 缓存没有查询数据库</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">Map</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">String</span><span style="color:#002339;">, </span><span style="color:#0991B6;">Object</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">params</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">HashMap</span><span style="color:#002339;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">resourcesCategoryService</span><span style="color:#002339;">.</span><span style="color:#7EB233;">list</span><span style="color:#002339;">(params);</span></span>
<span class="line"><span style="color:#002339;">            value </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">toJSONString</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 设置过期时间</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(key,value,</span><span style="color:#2F86D2;">RedisUtils</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">HOUR_MSM_EXPIRE</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> list;</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * service  分布式锁 模式一</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     *  问题：</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     *      如果代码出现异常或者页面过程宕机，没有执行删除锁逻辑，这就造成死锁现象</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     *  解决：加锁的自动过期时间，即使没有删除也会自动删除</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#7EB233;">listRedisNXTest1</span><span style="color:#002339;">(</span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#B1108E;">key</span><span style="color:#002339;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// service层业务加锁</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">Boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">isLock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">setIfAbsent</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;lock&quot;</span><span style="color:#002339;">, </span><span style="color:#A44185;">&quot;1&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (isLock){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 加锁成功</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">//先查缓存 双重检测</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">value</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (String) </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">StringUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isEmpty</span><span style="color:#002339;">(key)){</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#357B42;font-style:italic;">// 缓存不为空直接返回</span></span>
<span class="line"><span style="color:#002339;">          </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">parseObject</span><span style="color:#002339;">(value,</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">TypeReference</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt;&gt;(){});</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">System</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">out</span><span style="color:#002339;">.</span><span style="color:#7EB233;">println</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;========查询数据库=========&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 缓存没有查询数据库</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">Map</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">String</span><span style="color:#002339;">, </span><span style="color:#0991B6;">Object</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">params</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">HashMap</span><span style="color:#002339;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">resourcesCategoryService</span><span style="color:#002339;">.</span><span style="color:#7EB233;">list</span><span style="color:#002339;">(params);</span></span>
<span class="line"><span style="color:#002339;">            value </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">toJSONString</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 设置过期时间</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(key,value,</span><span style="color:#2F86D2;">RedisUtils</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">HOUR_MSM_EXPIRE</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 删除锁</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">delete</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;lock&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> list;</span></span>
<span class="line"><span style="color:#002339;">        }</span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 加锁失败 自旋锁 可休眠100ms</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">listRedisNXTest1</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 分布式锁 模式二</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 问题：删锁直接删除嘛？</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     *       如果由于业务时间很长，自己的锁自动过期了，再去执行删锁，那么就把别人的锁给删除了</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 解决：添加随机值，每一个人只能删除自己的锁</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#7EB233;">listRedisNXTest2</span><span style="color:#002339;">(</span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#B1108E;">key</span><span style="color:#002339;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// service层业务加锁</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// Boolean isLock = redisUtils.setIfAbsent(&quot;lock&quot;, &quot;1&quot;);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 加锁和设置过期时间为原子操作</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">Boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">isLock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">setIfAbsent</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;lock&quot;</span><span style="color:#002339;">, </span><span style="color:#A44185;">&quot;1&quot;</span><span style="color:#002339;">,</span><span style="color:#2F86D2;">RedisUtils</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">HOUR_MSM_EXPIRE</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (isLock){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 加锁成功 设置过期时间</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">//redisUtils.expire(&quot;lock&quot;,RedisUtils.HOUR_MSM_EXPIRE);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">selectList</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 删除锁</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">delete</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;lock&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> list;</span></span>
<span class="line"><span style="color:#002339;">        }</span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 加锁失败 自旋锁 可休眠100ms</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">listRedisNXTest2</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 分布式锁 模式三</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#7EB233;">listRedisNXTest3</span><span style="color:#002339;">(</span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#B1108E;">key</span><span style="color:#002339;">){</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">uuid</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">UUID</span><span style="color:#002339;">.</span><span style="color:#7EB233;">randomUUID</span><span style="color:#002339;">().</span><span style="color:#7EB233;">toString</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">Boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">isLock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">setIfAbsent</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;lock&quot;</span><span style="color:#002339;">, uuid,</span><span style="color:#2F86D2;">RedisUtils</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">HOUR_MSM_EXPIRE</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (isLock){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">selectList</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 获取值对比</span></span>
<span class="line"><span style="color:#002339;">           </span><span style="color:#357B42;font-style:italic;">/* String value = (String) redisUtils.get(key);</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">            if (uuid.equals(value)){</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">                // 删除自己的锁</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">                redisUtils.delete(&quot;lock&quot;);</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">            }*/</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 使用 lua 脚本解锁</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">script</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;if redis.call(&#39;get&#39;,KEYS[1] == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1] else return 0 end))&quot;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">execute</span><span style="color:#002339;">(</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">DefaultRedisScript</span><span style="color:#002339;">&lt;&gt;(script,</span><span style="color:#2F86D2;">Integer</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">class</span><span style="color:#002339;">), </span></span>
<span class="line"><span style="color:#002339;">                               </span><span style="color:#2F86D2;">Arrays</span><span style="color:#002339;">.</span><span style="color:#7EB233;">asList</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;lock&quot;</span><span style="color:#002339;">),uuid);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> list;</span></span>
<span class="line"><span style="color:#002339;">        }</span><span style="color:#7B30D0;">else</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 加锁失败 自旋锁 可休眠</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">Thread</span><span style="color:#002339;">.</span><span style="color:#7EB233;">sleep</span><span style="color:#002339;">(</span><span style="color:#174781;">200</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">InterruptedException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">                </span><span style="color:#2F86D2;">e</span><span style="color:#002339;">.</span><span style="color:#7EB233;">printStackTrace</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            }</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#7EB233;">listRedisNXTest3</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#174781;">null</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 分布式锁 Redisson</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">redissonTest</span><span style="color:#002339;">(){</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RLock</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">lock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getLock</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;my-lock&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 加锁</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">lock</span><span style="color:#002339;">.</span><span style="color:#7EB233;">lock</span><span style="color:#002339;">(); </span><span style="color:#357B42;font-style:italic;">// 默认加的锁都是 30s 时间</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">Thread</span><span style="color:#002339;">.</span><span style="color:#7EB233;">sleep</span><span style="color:#002339;">(</span><span style="color:#174781;">3000</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        }</span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Exception</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">        }</span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 解锁</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">lock</span><span style="color:#002339;">.</span><span style="color:#7EB233;">unlock</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 读写锁 Redisson</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">redissonWrite</span><span style="color:#002339;">(){</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RReadWriteLock</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">lock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getReadWriteLock</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;rw-lock&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">s</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;&quot;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RLock</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">rLock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">lock</span><span style="color:#002339;">.</span><span style="color:#7EB233;">writeLock</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">rLock</span><span style="color:#002339;">.</span><span style="color:#7EB233;">lock</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            s </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">UUID</span><span style="color:#002339;">.</span><span style="color:#7EB233;">randomUUID</span><span style="color:#002339;">().</span><span style="color:#7EB233;">toString</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">Thread</span><span style="color:#002339;">.</span><span style="color:#7EB233;">sleep</span><span style="color:#002339;">(</span><span style="color:#174781;">30000</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;writeValue&quot;</span><span style="color:#002339;">,s);</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">InterruptedException</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">e</span><span style="color:#002339;">.</span><span style="color:#7EB233;">printStackTrace</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span><span style="color:#7B30D0;">finally</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">rLock</span><span style="color:#002339;">.</span><span style="color:#7EB233;">unlock</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 读写锁 Redisson</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">redissonRead</span><span style="color:#002339;">(){</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RReadWriteLock</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">lock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getReadWriteLock</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;rw-lock&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">s</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#A44185;">&quot;&quot;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RLock</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">rLock</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">lock</span><span style="color:#002339;">.</span><span style="color:#7EB233;">readLock</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">rLock</span><span style="color:#002339;">.</span><span style="color:#7EB233;">lock</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">try</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">            s </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (String) </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;readValue&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        } </span><span style="color:#7B30D0;">catch</span><span style="color:#002339;"> (</span><span style="color:#0991B6;">Exception</span><span style="color:#002339;"> </span><span style="color:#B1108E;">e</span><span style="color:#002339;">){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#2F86D2;">e</span><span style="color:#002339;">.</span><span style="color:#7EB233;">printStackTrace</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 信号量 限流</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">park</span><span style="color:#002339;">() </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">InterruptedException</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RSemaphore</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">park</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getSemaphore</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;park&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">park</span><span style="color:#002339;">.</span><span style="color:#7EB233;">acquire</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 获取一个信号量</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">boolean</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">b</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">park</span><span style="color:#002339;">.</span><span style="color:#7EB233;">tryAcquire</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 释放一个信号量</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">park</span><span style="color:#002339;">.</span><span style="color:#7EB233;">release</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// 闭锁</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * 例如 秒杀 商品全部拍卖完毕，闭锁</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">lockDoor</span><span style="color:#002339;">() </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">InterruptedException</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RCountDownLatch</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">door</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getCountDownLatch</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;door&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">door</span><span style="color:#002339;">.</span><span style="color:#7EB233;">trySetCount</span><span style="color:#002339;">(</span><span style="color:#174781;">5</span><span style="color:#002339;">); </span><span style="color:#357B42;font-style:italic;">// 等待5的商品拍卖完毕</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">door</span><span style="color:#002339;">.</span><span style="color:#7EB233;">await</span><span style="color:#002339;">(); </span><span style="color:#357B42;font-style:italic;">// 等待闭锁完成</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">void</span><span style="color:#002339;"> </span><span style="color:#7EB233;">lockGoDoor</span><span style="color:#002339;">() </span><span style="color:#DA5221;">throws</span><span style="color:#002339;"> </span><span style="color:#0991B6;">InterruptedException</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">RCountDownLatch</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">door</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">redisson</span><span style="color:#002339;">.</span><span style="color:#7EB233;">getCountDownLatch</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;door&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">door</span><span style="color:#002339;">.</span><span style="color:#7EB233;">countDown</span><span style="color:#002339;">(); </span><span style="color:#357B42;font-style:italic;">// 计数减一</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#7EB233;">selectList</span><span style="color:#002339;">(</span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#B1108E;">key</span><span style="color:#002339;">){</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">//先查缓存 双重检测</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">String</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">value</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (String) </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">get</span><span style="color:#002339;">(key);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">StringUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">isEmpty</span><span style="color:#002339;">(key)){</span></span>
<span class="line"><span style="color:#002339;">            </span><span style="color:#357B42;font-style:italic;">// 缓存不为空直接返回</span></span>
<span class="line"><span style="color:#002339;">          </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">parseObject</span><span style="color:#002339;">(value,</span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">TypeReference</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt;&gt;(){});</span></span>
<span class="line"><span style="color:#002339;">        }</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">System</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">out</span><span style="color:#002339;">.</span><span style="color:#7EB233;">println</span><span style="color:#002339;">(</span><span style="color:#A44185;">&quot;========查询数据库=========&quot;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#357B42;font-style:italic;">// 缓存没有查询数据库</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">Map</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">String</span><span style="color:#002339;">, </span><span style="color:#0991B6;">Object</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">params</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#0991B6;">HashMap</span><span style="color:#002339;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#0991B6;">List</span><span style="color:#002339;">&lt;</span><span style="color:#0991B6;">ResourcesCategoryDto</span><span style="color:#002339;">&gt; </span><span style="color:#2F86D2;">list</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">resourcesCategoryService</span><span style="color:#002339;">.</span><span style="color:#7EB233;">list</span><span style="color:#002339;">(params);</span></span>
<span class="line"><span style="color:#002339;">        value </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JSON</span><span style="color:#002339;">.</span><span style="color:#7EB233;">toJSONString</span><span style="color:#002339;">(list);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#2F86D2;">redisUtils</span><span style="color:#002339;">.</span><span style="color:#7EB233;">set</span><span style="color:#002339;">(key,value,</span><span style="color:#2F86D2;">RedisUtils</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">HOUR_MSM_EXPIRE</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> list;</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div>`,171),F=[R];function C(S,_,x,L,P,w){return a(),l("div",null,F)}const M=n(q,[["render",C]]);export{O as __pageData,M as default};
